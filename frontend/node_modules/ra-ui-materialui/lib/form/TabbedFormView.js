"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTabbedFormViewStyles = exports.TabbedFormView = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var prop_types_1 = __importDefault(require("prop-types"));
var classnames_1 = __importDefault(require("classnames"));
var react_router_dom_1 = require("react-router-dom");
var core_1 = require("@material-ui/core");
var styles_1 = require("@material-ui/core/styles");
var ra_core_1 = require("ra-core");
var Toolbar_1 = __importDefault(require("./Toolbar"));
var TabbedFormTabs_1 = __importStar(require("./TabbedFormTabs"));
var TabbedFormView = function (props) {
    var basePath = props.basePath, children = props.children, className = props.className, classesOverride = props.classes, formRootPathname = props.formRootPathname, handleSubmit = props.handleSubmit, handleSubmitWithRedirect = props.handleSubmitWithRedirect, invalid = props.invalid, mutationMode = props.mutationMode, pristine = props.pristine, record = props.record, defaultRedirect = props.redirect, resource = props.resource, saving = props.saving, submitOnEnter = props.submitOnEnter, _a = props.syncWithLocation, syncWithLocation = _a === void 0 ? true : _a, tabs = props.tabs, toolbar = props.toolbar, undoable = props.undoable, variant = props.variant, margin = props.margin, validating = props.validating, rest = __rest(props, ["basePath", "children", "className", "classes", "formRootPathname", "handleSubmit", "handleSubmitWithRedirect", "invalid", "mutationMode", "pristine", "record", "redirect", "resource", "saving", "submitOnEnter", "syncWithLocation", "tabs", "toolbar", "undoable", "variant", "margin", "validating"]);
    var classes = (0, exports.useTabbedFormViewStyles)(props);
    var match = (0, react_router_dom_1.useRouteMatch)();
    var location = (0, react_router_dom_1.useLocation)();
    var url = match ? match.url : location.pathname;
    var _b = (0, react_1.useState)(0), tabValue = _b[0], setTabValue = _b[1];
    var handleTabChange = function (event, value) {
        if (!syncWithLocation) {
            setTabValue(value);
        }
    };
    return (React.createElement("form", __assign({ className: (0, classnames_1.default)('tabbed-form', className) }, sanitizeRestProps(rest)),
        (0, react_1.cloneElement)(tabs, {
            classes: classes,
            url: url,
            syncWithLocation: syncWithLocation,
            onChange: handleTabChange,
            value: tabValue,
        }, children),
        React.createElement(core_1.Divider, null),
        React.createElement("div", { className: classes.content }, react_1.Children.map(children, function (tab, index) {
            if (!tab) {
                return;
            }
            var tabPath = (0, TabbedFormTabs_1.getTabFullPath)(tab, index, url);
            return (React.createElement(react_router_dom_1.Route, { exact: true, path: (0, ra_core_1.escapePath)(tabPath) }, function (routeProps) {
                return (0, react_1.isValidElement)(tab)
                    ? React.cloneElement(tab, {
                        intent: 'content',
                        classes: classes,
                        resource: resource,
                        record: record,
                        basePath: basePath,
                        hidden: syncWithLocation
                            ? !routeProps.match
                            : tabValue !== index,
                        variant: tab.props.variant || variant,
                        margin: tab.props.margin || margin,
                        value: syncWithLocation
                            ? tabPath
                            : index,
                    })
                    : null;
            }));
        })),
        toolbar &&
            React.cloneElement(toolbar, {
                basePath: basePath,
                className: 'toolbar',
                handleSubmitWithRedirect: handleSubmitWithRedirect,
                handleSubmit: handleSubmit,
                invalid: invalid,
                mutationMode: mutationMode,
                pristine: pristine,
                record: record,
                redirect: defaultRedirect,
                resource: resource,
                saving: saving,
                submitOnEnter: submitOnEnter,
                validating: validating,
                undoable: undoable,
            })));
};
exports.TabbedFormView = TabbedFormView;
exports.useTabbedFormViewStyles = (0, styles_1.makeStyles)(function (theme) { return ({
    errorTabButton: { color: theme.palette.error.main },
    content: {
        paddingTop: theme.spacing(1),
        paddingLeft: theme.spacing(2),
        paddingRight: theme.spacing(2),
    },
}); }, { name: 'RaTabbedForm' });
exports.TabbedFormView.propTypes = {
    basePath: prop_types_1.default.string,
    children: prop_types_1.default.node,
    className: prop_types_1.default.string,
    classes: prop_types_1.default.object,
    defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
    handleSubmit: prop_types_1.default.func,
    initialValues: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
    invalid: prop_types_1.default.bool,
    location: prop_types_1.default.object,
    match: prop_types_1.default.object,
    mutationMode: prop_types_1.default.oneOf(['pessimistic', 'optimistic', 'undoable']),
    pristine: prop_types_1.default.bool,
    // @ts-ignore
    record: prop_types_1.default.object,
    redirect: prop_types_1.default.oneOfType([
        prop_types_1.default.string,
        prop_types_1.default.bool,
        prop_types_1.default.func,
    ]),
    resource: prop_types_1.default.string,
    save: prop_types_1.default.func,
    saving: prop_types_1.default.bool,
    submitOnEnter: prop_types_1.default.bool,
    tabs: prop_types_1.default.element.isRequired,
    toolbar: prop_types_1.default.element,
    translate: prop_types_1.default.func,
    undoable: prop_types_1.default.bool,
    validate: prop_types_1.default.func,
    value: prop_types_1.default.number,
    version: prop_types_1.default.number,
};
exports.TabbedFormView.defaultProps = {
    submitOnEnter: true,
    tabs: React.createElement(TabbedFormTabs_1.default, null),
    toolbar: React.createElement(Toolbar_1.default, null),
};
var sanitizeRestProps = function (_a) {
    var active = _a.active, dirty = _a.dirty, dirtyFields = _a.dirtyFields, dirtyFieldsSinceLastSubmit = _a.dirtyFieldsSinceLastSubmit, dirtySinceLastSubmit = _a.dirtySinceLastSubmit, error = _a.error, errors = _a.errors, form = _a.form, hasSubmitErrors = _a.hasSubmitErrors, hasValidationErrors = _a.hasValidationErrors, initialValues = _a.initialValues, _b = _a.modified, modified = _b === void 0 ? null : _b, modifiedSinceLastSubmit = _a.modifiedSinceLastSubmit, _c = _a.save, save = _c === void 0 ? null : _c, submitError = _a.submitError, submitErrors = _a.submitErrors, submitFailed = _a.submitFailed, submitSucceeded = _a.submitSucceeded, submitting = _a.submitting, _d = _a.touched, touched = _d === void 0 ? null : _d, valid = _a.valid, values = _a.values, _e = _a.visited, visited = _e === void 0 ? null : _e, _f = _a.__versions, __versions = _f === void 0 ? null : _f, props = __rest(_a, ["active", "dirty", "dirtyFields", "dirtyFieldsSinceLastSubmit", "dirtySinceLastSubmit", "error", "errors", "form", "hasSubmitErrors", "hasValidationErrors", "initialValues", "modified", "modifiedSinceLastSubmit", "save", "submitError", "submitErrors", "submitFailed", "submitSucceeded", "submitting", "touched", "valid", "values", "visited", "__versions"]);
    return props;
};
