{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences } from '../reducer';\n\nvar referenceSource = function (resource, source) {\n  return resource + \"@\" + source;\n};\n/**\n * Call the dataProvider.getList() method return the resolved result\n * as well as the loading state.\n *\n * React-admin uses a different store location for the result of this query\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\n * the ids and total for the resource.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'tags'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMatching } from 'react-admin';\n *\n * const PostTags = () => {\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\n *     const { data, loading, error } = useGetMatching(\n *         'tags',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' },\n *         {},\n *         'tag_ids',\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\n\n\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\n  var relatedTo = referenceSource(referencingResource, source);\n  var payload = {\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  };\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: payload\n  }, __assign(__assign({}, options), {\n    relatedTo: relatedTo,\n    action: CRUD_GET_MATCHING\n  }), function (state) {\n    return getPossibleReferenceValues(state, {\n      referenceSource: referenceSource,\n      resource: referencingResource,\n      source: source\n    });\n  }, function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', JSON.stringify(payload), 'total'], null);\n  }),\n      possibleValues = _a.data,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var referenceState = useSelector(function (state) {\n    return getReferenceResource(state, {\n      reference: resource\n    });\n  });\n  var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n  return {\n    data: possibleReferences,\n    ids: possibleValues,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\n\nexport default useGetMatching;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","useSelector","get","CRUD_GET_MATCHING","useQueryWithStore","getReferenceResource","getPossibleReferenceValues","getPossibleReferences","referenceSource","resource","source","useGetMatching","pagination","sort","filter","referencingResource","options","relatedTo","payload","_a","type","action","state","admin","resources","JSON","stringify","possibleValues","data","total","error","loading","loaded","refetch","referenceState","reference","possibleReferences","ids"],"sources":["/app/node_modules/ra-core/esm/dataProvider/useGetMatching.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport { CRUD_GET_MATCHING } from '../actions/dataActions/crudGetMatching';\nimport { useQueryWithStore } from './useQueryWithStore';\nimport { getReferenceResource, getPossibleReferenceValues, getPossibleReferences, } from '../reducer';\nvar referenceSource = function (resource, source) { return resource + \"@\" + source; };\n/**\n * Call the dataProvider.getList() method return the resolved result\n * as well as the loading state.\n *\n * React-admin uses a different store location for the result of this query\n * than for useGetList(). Therefore, calling useGetMatching() does not modify\n * the ids and total for the resource.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The referenced resource name, e.g. 'tags'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {string} source The field in resource containing the ids of the referenced records, e.g. 'tag_ids'\n * @param {string} referencingResource The resource name, e.g. 'posts'. Used to build a cache key\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetMatching } from 'react-admin';\n *\n * const PostTags = () => {\n *     // call dataProvider.getList('tags', { pagination: { page: 1, perPage: 10 }, sort: { { field: 'published_at', order: 'DESC' } } })\n *     const { data, loading, error } = useGetMatching(\n *         'tags',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' },\n *         {},\n *         'tag_ids',\n *         'posts',\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{data.map(tag =>\n *         <li key={tag.id}>{tag.name}</li>\n *     )}</ul>;\n * };\n */\nvar useGetMatching = function (resource, pagination, sort, filter, source, referencingResource, options) {\n    var relatedTo = referenceSource(referencingResource, source);\n    var payload = { pagination: pagination, sort: sort, filter: filter };\n    var _a = useQueryWithStore({\n        type: 'getList',\n        resource: resource,\n        payload: payload,\n    }, __assign(__assign({}, options), { relatedTo: relatedTo, action: CRUD_GET_MATCHING }), function (state) {\n        return getPossibleReferenceValues(state, {\n            referenceSource: referenceSource,\n            resource: referencingResource,\n            source: source,\n        });\n    }, function (state) {\n        return get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            JSON.stringify(payload),\n            'total',\n        ], null);\n    }), possibleValues = _a.data, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var referenceState = useSelector(function (state) {\n        return getReferenceResource(state, {\n            reference: resource,\n        });\n    });\n    var possibleReferences = getPossibleReferences(referenceState, possibleValues, []);\n    return {\n        data: possibleReferences,\n        ids: possibleValues,\n        total: total,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nexport default useGetMatching;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}