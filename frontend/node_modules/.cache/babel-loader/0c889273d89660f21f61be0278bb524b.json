{"ast":null,"code":"import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\n\nvar ListPaginationContext = createContext({\n  loading: null,\n  page: null,\n  perPage: null,\n  setPage: null,\n  setPerPage: null,\n  total: null,\n  resource: null\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n  return useMemo(function () {\n    return pick(context, ['loading', 'page', 'perPage', 'setPage', 'setPerPage', 'total', 'resource']);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [context.loading, context.page, context.perPage, context.setPage, context.setPerPage, context.total]);\n};\nexport default ListPaginationContext;","map":{"version":3,"names":["createContext","useMemo","pick","ListPaginationContext","loading","page","perPage","setPage","setPerPage","total","resource","displayName","usePickPaginationContext","context"],"sources":["/app/node_modules/ra-core/esm/controller/ListPaginationContext.js"],"sourcesContent":["import { createContext, useMemo } from 'react';\nimport pick from 'lodash/pick';\n/**\n * Context to store the pagination part of the useListController() result.\n *\n * Use the useListPaginationContext() hook to read the pagination information.\n * That's what List components do in react-admin (e.g. <Pagination>).\n *\n * @typedef {Object} ListPaginationContextValue\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @typedef Props\n * @prop {ListPaginationContextValue} value\n *\n * @param {Props}\n *\n * @see useListController\n * @see useListContext\n *\n * @example\n *\n * import { useListController, ListPaginationContext } from 'ra-core';\n *\n * const List = props => {\n *     const controllerProps = useListController(props);\n *     return (\n *         <ListPaginationContext.Provider value={controllerProps}>\n *             ...\n *         </ListPaginationContext.Provider>\n *     );\n * };\n */\nvar ListPaginationContext = createContext({\n    loading: null,\n    page: null,\n    perPage: null,\n    setPage: null,\n    setPerPage: null,\n    total: null,\n    resource: null,\n});\nListPaginationContext.displayName = 'ListPaginationContext';\nexport var usePickPaginationContext = function (context) {\n    return useMemo(function () {\n        return pick(context, [\n            'loading',\n            'page',\n            'perPage',\n            'setPage',\n            'setPerPage',\n            'total',\n            'resource',\n        ]);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        context.loading,\n        context.page,\n        context.perPage,\n        context.setPage,\n        context.setPerPage,\n        context.total,\n    ]);\n};\nexport default ListPaginationContext;\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB,GAAGH,aAAa,CAAC;EACtCI,OAAO,EAAE,IAD6B;EAEtCC,IAAI,EAAE,IAFgC;EAGtCC,OAAO,EAAE,IAH6B;EAItCC,OAAO,EAAE,IAJ6B;EAKtCC,UAAU,EAAE,IAL0B;EAMtCC,KAAK,EAAE,IAN+B;EAOtCC,QAAQ,EAAE;AAP4B,CAAD,CAAzC;AASAP,qBAAqB,CAACQ,WAAtB,GAAoC,uBAApC;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAUC,OAAV,EAAmB;EACrD,OAAOZ,OAAO,CAAC,YAAY;IACvB,OAAOC,IAAI,CAACW,OAAD,EAAU,CACjB,SADiB,EAEjB,MAFiB,EAGjB,SAHiB,EAIjB,SAJiB,EAKjB,YALiB,EAMjB,OANiB,EAOjB,UAPiB,CAAV,CAAX;EASH,CAVa,EAWd;EACA,CACIA,OAAO,CAACT,OADZ,EAEIS,OAAO,CAACR,IAFZ,EAGIQ,OAAO,CAACP,OAHZ,EAIIO,OAAO,CAACN,OAJZ,EAKIM,OAAO,CAACL,UALZ,EAMIK,OAAO,CAACJ,KANZ,CAZc,CAAd;AAoBH,CArBM;AAsBP,eAAeN,qBAAf"},"metadata":{},"sourceType":"module"}