{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { loading: false, loaded: false }]\n * - start:   [update, { loading: true, loaded: false }]\n * - success: [update, { data: [data from response], loading: false, loaded: true }]\n * - error:   [update, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param data The updates to merge into the record, e.g. { views: 10 }\n * @param previousData The record before the update is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [update, { data, error, loading, loaded }].\n *\n * The update() function can be called in 3 different ways:\n *  - with the same parameters as the useUpdate() hook: update(resource, id, data, previousData, options)\n *  - with the same syntax as useMutation: update({ resource, payload: { id, data, previousData } }, options)\n *  - with no parameter (if they were already passed to useUpdate()): update()\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate } from 'react-admin';\n *\n * const IncreaseLikeButton = ({ record }) => {\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { loading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', record.id, diff, record)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate } from 'react-admin';\n *\n * const IncreaseLikeButton = ({ record }) => {\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { loading, error }] = useUpdate('likes', record.id, diff, record);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={update}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', id, changes, product);\n *                    \\-- data is Product\n */\n\nvar useUpdate = function (resource, id, data, previousData, options) {\n  var _a = useMutation({\n    type: 'update',\n    resource: resource,\n    payload: {\n      id: id,\n      data: data,\n      previousData: previousData\n    }\n  }, options),\n      mutate = _a[0],\n      state = _a[1];\n\n  var update = useCallback(function (resource, id, data, previousData, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'update',\n        resource: resource,\n        payload: {\n          id: id,\n          data: data,\n          previousData: previousData\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, id);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return [update, state];\n};\n\nexport default useUpdate;","map":{"version":3,"names":["useCallback","useMutation","useUpdate","resource","id","data","previousData","options","_a","type","payload","mutate","state","update","query"],"sources":["/app/node_modules/ra-core/esm/dataProvider/useUpdate.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.update() method, the result and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [update, { loading: false, loaded: false }]\n * - start:   [update, { loading: true, loaded: false }]\n * - success: [update, { data: [data from response], loading: false, loaded: true }]\n * - error:   [update, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param id The resource identifier, e.g. 123\n * @param data The updates to merge into the record, e.g. { views: 10 }\n * @param previousData The record before the update is applied\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [update, { data, error, loading, loaded }].\n *\n * The update() function can be called in 3 different ways:\n *  - with the same parameters as the useUpdate() hook: update(resource, id, data, previousData, options)\n *  - with the same syntax as useMutation: update({ resource, payload: { id, data, previousData } }, options)\n *  - with no parameter (if they were already passed to useUpdate()): update()\n *\n * @example // set params when calling the update callback\n *\n * import { useUpdate } from 'react-admin';\n *\n * const IncreaseLikeButton = ({ record }) => {\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { loading, error }] = useUpdate();\n *     const handleClick = () => {\n *         update('likes', record.id, diff, record)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Like</div>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdate } from 'react-admin';\n *\n * const IncreaseLikeButton = ({ record }) => {\n *     const diff = { likes: record.likes + 1 };\n *     const [update, { loading, error }] = useUpdate('likes', record.id, diff, record);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={update}>Like</button>;\n * };\n *\n * @example // TypeScript\n * const [update, { data }] = useUpdate<Product>('products', id, changes, product);\n *                    \\-- data is Product\n */\nvar useUpdate = function (resource, id, data, previousData, options) {\n    var _a = useMutation({ type: 'update', resource: resource, payload: { id: id, data: data, previousData: previousData } }, options), mutate = _a[0], state = _a[1];\n    var update = useCallback(function (resource, id, data, previousData, options) {\n        if (typeof resource === 'string') {\n            var query = {\n                type: 'update',\n                resource: resource,\n                payload: {\n                    id: id,\n                    data: data,\n                    previousData: previousData,\n                },\n            };\n            return mutate(query, options);\n        }\n        else {\n            return mutate(resource, id);\n        }\n    }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return [update, state];\n};\nexport default useUpdate;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,UAAUC,QAAV,EAAoBC,EAApB,EAAwBC,IAAxB,EAA8BC,YAA9B,EAA4CC,OAA5C,EAAqD;EACjE,IAAIC,EAAE,GAAGP,WAAW,CAAC;IAAEQ,IAAI,EAAE,QAAR;IAAkBN,QAAQ,EAAEA,QAA5B;IAAsCO,OAAO,EAAE;MAAEN,EAAE,EAAEA,EAAN;MAAUC,IAAI,EAAEA,IAAhB;MAAsBC,YAAY,EAAEA;IAApC;EAA/C,CAAD,EAAsGC,OAAtG,CAApB;EAAA,IAAoII,MAAM,GAAGH,EAAE,CAAC,CAAD,CAA/I;EAAA,IAAoJI,KAAK,GAAGJ,EAAE,CAAC,CAAD,CAA9J;;EACA,IAAIK,MAAM,GAAGb,WAAW,CAAC,UAAUG,QAAV,EAAoBC,EAApB,EAAwBC,IAAxB,EAA8BC,YAA9B,EAA4CC,OAA5C,EAAqD;IAC1E,IAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;MAC9B,IAAIW,KAAK,GAAG;QACRL,IAAI,EAAE,QADE;QAERN,QAAQ,EAAEA,QAFF;QAGRO,OAAO,EAAE;UACLN,EAAE,EAAEA,EADC;UAELC,IAAI,EAAEA,IAFD;UAGLC,YAAY,EAAEA;QAHT;MAHD,CAAZ;MASA,OAAOK,MAAM,CAACG,KAAD,EAAQP,OAAR,CAAb;IACH,CAXD,MAYK;MACD,OAAOI,MAAM,CAACR,QAAD,EAAWC,EAAX,CAAb;IACH;EACJ,CAhBuB,EAgBrB,CAACO,MAAD,CAhBqB,CAgBZ;EAhBY,CAAxB;EAkBA,OAAO,CAACE,MAAD,EAASD,KAAT,CAAP;AACH,CArBD;;AAsBA,eAAeV,SAAf"},"metadata":{},"sourceType":"module"}