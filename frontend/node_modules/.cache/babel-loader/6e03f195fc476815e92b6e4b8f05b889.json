{"ast":null,"code":"/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [// 'access',\n  'accommodation', 'adulthood', 'advertising', 'advice', 'aggression', 'aid', 'air', 'aircraft', 'alcohol', 'anger', 'applause', 'arithmetic', // 'art',\n  'assistance', 'athletics', // 'attention',\n  'bacon', 'baggage', // 'ballet',\n  // 'beauty',\n  'beef', // 'beer',\n  // 'behavior',\n  'biology', // 'billiards',\n  'blood', 'botany', // 'bowels',\n  'bread', // 'business',\n  'butter', 'carbon', 'cardboard', 'cash', 'chalk', 'chaos', 'chess', 'crossroads', 'countryside', // 'damage',\n  'dancing', // 'danger',\n  'deer', // 'delight',\n  // 'dessert',\n  'dignity', 'dirt', // 'distribution',\n  'dust', 'economics', 'education', 'electricity', // 'employment',\n  // 'energy',\n  'engineering', 'enjoyment', // 'entertainment',\n  'envy', 'equipment', 'ethics', 'evidence', 'evolution', // 'failure',\n  // 'faith',\n  'fame', 'fiction', // 'fish',\n  'flour', 'flu', 'food', // 'freedom',\n  // 'fruit',\n  'fuel', 'fun', // 'funeral',\n  'furniture', 'gallows', 'garbage', 'garlic', // 'gas',\n  'genetics', // 'glass',\n  'gold', 'golf', 'gossip', // 'grass',\n  'gratitude', 'grief', // 'ground',\n  'guilt', 'gymnastics', // 'hair',\n  'happiness', 'hardware', 'harm', 'hate', 'hatred', 'health', 'heat', // 'height',\n  'help', 'homework', 'honesty', 'honey', 'hospitality', 'housework', 'humour', 'hunger', 'hydrogen', 'ice', 'importance', 'inflation', 'information', // 'injustice',\n  'innocence', // 'intelligence',\n  'iron', 'irony', 'jam', // 'jealousy',\n  // 'jelly',\n  'jewelry', // 'joy',\n  'judo', // 'juice',\n  // 'justice',\n  'karate', // 'kindness',\n  'knowledge', // 'labour',\n  'lack', // 'land',\n  'laughter', 'lava', 'leather', 'leisure', 'lightning', 'linguine', 'linguini', 'linguistics', 'literature', 'litter', 'livestock', 'logic', 'loneliness', // 'love',\n  'luck', 'luggage', 'macaroni', 'machinery', 'magic', // 'mail',\n  'management', 'mankind', 'marble', 'mathematics', 'mayonnaise', 'measles', // 'meat',\n  // 'metal',\n  'methane', 'milk', 'minus', 'money', // 'moose',\n  'mud', 'music', 'mumps', 'nature', 'news', 'nitrogen', 'nonsense', 'nurture', 'nutrition', 'obedience', 'obesity', // 'oil',\n  'oxygen', // 'paper',\n  // 'passion',\n  'pasta', 'patience', // 'permission',\n  'physics', 'poetry', 'pollution', 'poverty', // 'power',\n  'pride', // 'production',\n  // 'progress',\n  // 'pronunciation',\n  'psychology', 'publicity', 'punctuation', // 'quality',\n  // 'quantity',\n  'quartz', 'racism', // 'rain',\n  // 'recreation',\n  'relaxation', 'reliability', 'research', 'respect', 'revenge', 'rice', 'rubbish', 'rum', 'safety', // 'salad',\n  // 'salt',\n  // 'sand',\n  // 'satire',\n  'scenery', 'seafood', 'seaside', 'series', 'shame', 'sheep', 'shopping', // 'silence',\n  'sleep', // 'slang'\n  'smoke', 'smoking', 'snow', 'soap', 'software', 'soil', // 'sorrow',\n  // 'soup',\n  'spaghetti', // 'speed',\n  'species', // 'spelling',\n  // 'sport',\n  'steam', // 'strength',\n  'stuff', 'stupidity', // 'success',\n  // 'sugar',\n  'sunshine', 'symmetry', // 'tea',\n  'tennis', 'thirst', 'thunder', 'timber', // 'time',\n  // 'toast',\n  // 'tolerance',\n  // 'trade',\n  'traffic', 'transportation', // 'travel',\n  'trust', // 'understanding',\n  'underwear', 'unemployment', 'unity', // 'usage',\n  'validity', 'veal', 'vegetation', 'vegetarianism', 'vengeance', 'violence', // 'vision',\n  'vitality', 'warmth', // 'water',\n  'wealth', 'weather', // 'weight',\n  'welfare', 'wheat', // 'whiskey',\n  // 'width',\n  'wildlife', // 'wine',\n  'wisdom', // 'wood',\n  // 'wool',\n  // 'work',\n  // 'yeast',\n  'yoga', 'zinc', 'zoology'];\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural: {\n      men: new RegExp('^(m|wom)en$', 'gi'),\n      people: new RegExp('(pe)ople$', 'gi'),\n      children: new RegExp('(child)ren$', 'gi'),\n      tia: new RegExp('([ti])a$', 'gi'),\n      analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n      drives: new RegExp('(drive)s$', 'gi'),\n      hives: new RegExp('(hi|ti)ves$', 'gi'),\n      curves: new RegExp('(curve)s$', 'gi'),\n      lrves: new RegExp('([lr])ves$', 'gi'),\n      aves: new RegExp('([a])ves$', 'gi'),\n      foves: new RegExp('([^fo])ves$', 'gi'),\n      movies: new RegExp('(m)ovies$', 'gi'),\n      aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n      series: new RegExp('(s)eries$', 'gi'),\n      xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n      mice: new RegExp('([m|l])ice$', 'gi'),\n      buses: new RegExp('(bus)es$', 'gi'),\n      oes: new RegExp('(o)es$', 'gi'),\n      shoes: new RegExp('(shoe)s$', 'gi'),\n      crises: new RegExp('(cris|ax|test)es$', 'gi'),\n      octopuses: new RegExp('(octop|vir)uses$', 'gi'),\n      aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n      summonses: new RegExp('^(summons|bonus)es$', 'gi'),\n      oxen: new RegExp('^(ox)en', 'gi'),\n      matrices: new RegExp('(matr)ices$', 'gi'),\n      vertices: new RegExp('(vert|ind)ices$', 'gi'),\n      feet: new RegExp('^feet$', 'gi'),\n      teeth: new RegExp('^teeth$', 'gi'),\n      geese: new RegExp('^geese$', 'gi'),\n      quizzes: new RegExp('(quiz)zes$', 'gi'),\n      whereases: new RegExp('^(whereas)es$', 'gi'),\n      criteria: new RegExp('^(criteri)a$', 'gi'),\n      genera: new RegExp('^genera$', 'gi'),\n      ss: new RegExp('ss$', 'gi'),\n      s: new RegExp('s$', 'gi')\n    },\n    singular: {\n      man: new RegExp('^(m|wom)an$', 'gi'),\n      person: new RegExp('(pe)rson$', 'gi'),\n      child: new RegExp('(child)$', 'gi'),\n      drive: new RegExp('(drive)$', 'gi'),\n      ox: new RegExp('^(ox)$', 'gi'),\n      axis: new RegExp('(ax|test)is$', 'gi'),\n      octopus: new RegExp('(octop|vir)us$', 'gi'),\n      alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n      summons: new RegExp('^(summons|bonus)$', 'gi'),\n      bus: new RegExp('(bu)s$', 'gi'),\n      buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n      tium: new RegExp('([ti])um$', 'gi'),\n      sis: new RegExp('sis$', 'gi'),\n      ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n      hive: new RegExp('(hi|ti)ve$', 'gi'),\n      aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n      x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n      matrix: new RegExp('(matr)ix$', 'gi'),\n      vertex: new RegExp('(vert|ind)ex$', 'gi'),\n      mouse: new RegExp('([m|l])ouse$', 'gi'),\n      foot: new RegExp('^foot$', 'gi'),\n      tooth: new RegExp('^tooth$', 'gi'),\n      goose: new RegExp('^goose$', 'gi'),\n      quiz: new RegExp('(quiz)$', 'gi'),\n      whereas: new RegExp('^(whereas)$', 'gi'),\n      criterion: new RegExp('^(criteri)on$', 'gi'),\n      genus: new RegExp('^genus$', 'gi'),\n      s: new RegExp('s$', 'gi'),\n      common: new RegExp('$', 'gi')\n    }\n  };\n  var plural_rules = [// do not replace if its already a plural word\n  [regex.plural.men], [regex.plural.people], [regex.plural.children], [regex.plural.tia], [regex.plural.analyses], [regex.plural.drives], [regex.plural.hives], [regex.plural.curves], [regex.plural.lrves], [regex.plural.foves], [regex.plural.aeiouyies], [regex.plural.series], [regex.plural.movies], [regex.plural.xes], [regex.plural.mice], [regex.plural.buses], [regex.plural.oes], [regex.plural.shoes], [regex.plural.crises], [regex.plural.octopuses], [regex.plural.aliases], [regex.plural.summonses], [regex.plural.oxen], [regex.plural.matrices], [regex.plural.feet], [regex.plural.teeth], [regex.plural.geese], [regex.plural.quizzes], [regex.plural.whereases], [regex.plural.criteria], [regex.plural.genera], // original rule\n  [regex.singular.man, '$1en'], [regex.singular.person, '$1ople'], [regex.singular.child, '$1ren'], [regex.singular.drive, '$1s'], [regex.singular.ox, '$1en'], [regex.singular.axis, '$1es'], [regex.singular.octopus, '$1uses'], [regex.singular.alias, '$1es'], [regex.singular.summons, '$1es'], [regex.singular.bus, '$1ses'], [regex.singular.buffalo, '$1oes'], [regex.singular.tium, '$1a'], [regex.singular.sis, 'ses'], [regex.singular.ffe, '$1$2ves'], [regex.singular.hive, '$1ves'], [regex.singular.aeiouyy, '$1ies'], [regex.singular.matrix, '$1ices'], [regex.singular.vertex, '$1ices'], [regex.singular.x, '$1es'], [regex.singular.mouse, '$1ice'], [regex.singular.foot, 'feet'], [regex.singular.tooth, 'teeth'], [regex.singular.goose, 'geese'], [regex.singular.quiz, '$1zes'], [regex.singular.whereas, '$1es'], [regex.singular.criterion, '$1a'], [regex.singular.genus, 'genera'], [regex.singular.s, 's'], [regex.singular.common, 's']];\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n\n  var singular_rules = [// do not replace if its already a singular word\n  [regex.singular.man], [regex.singular.person], [regex.singular.child], [regex.singular.drive], [regex.singular.ox], [regex.singular.axis], [regex.singular.octopus], [regex.singular.alias], [regex.singular.summons], [regex.singular.bus], [regex.singular.buffalo], [regex.singular.tium], [regex.singular.sis], [regex.singular.ffe], [regex.singular.hive], [regex.singular.aeiouyy], [regex.singular.x], [regex.singular.matrix], [regex.singular.mouse], [regex.singular.foot], [regex.singular.tooth], [regex.singular.goose], [regex.singular.quiz], [regex.singular.whereas], [regex.singular.criterion], [regex.singular.genus], // original rule\n  [regex.plural.men, '$1an'], [regex.plural.people, '$1rson'], [regex.plural.children, '$1'], [regex.plural.drives, '$1'], [regex.plural.genera, 'genus'], [regex.plural.criteria, '$1on'], [regex.plural.tia, '$1um'], [regex.plural.analyses, '$1$2sis'], [regex.plural.hives, '$1ve'], [regex.plural.curves, '$1'], [regex.plural.lrves, '$1f'], [regex.plural.aves, '$1ve'], [regex.plural.foves, '$1fe'], [regex.plural.movies, '$1ovie'], [regex.plural.aeiouyies, '$1y'], [regex.plural.series, '$1eries'], [regex.plural.xes, '$1'], [regex.plural.mice, '$1ouse'], [regex.plural.buses, '$1'], [regex.plural.oes, '$1'], [regex.plural.shoes, '$1'], [regex.plural.crises, '$1is'], [regex.plural.octopuses, '$1us'], [regex.plural.aliases, '$1'], [regex.plural.summonses, '$1'], [regex.plural.oxen, '$1'], [regex.plural.matrices, '$1ix'], [regex.plural.vertices, '$1ex'], [regex.plural.feet, 'foot'], [regex.plural.teeth, 'tooth'], [regex.plural.geese, 'goose'], [regex.plural.quizzes, '$1'], [regex.plural.whereases, '$1'], [regex.plural.ss, 'ss'], [regex.plural.s, '']];\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\n     * A helper method that applies rules based replacement to a String.\n     * @private\n     * @function\n     * @param {String} str String to modify and return based on the passed rules.\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n     * @param {Array: [String]} skip Strings to skip if they match\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n     * @returns {String} Return passed String modified by passed rules.\n     * @example\n     *\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n     */\n    _apply_rules: function (str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n    /**\n     * This lets us detect if an Array contains a given element.\n     * @public\n     * @function\n     * @param {Array} arr The subject array.\n     * @param {Object} item Object to locate in the Array.\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n     * @returns {Number} Return index position in the Array of the passed item.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n     */\n    indexOf: function (arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n    /**\n     * This function adds pluralization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} Singular English language nouns are returned in plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.pluralize( 'person' ); // === 'people'\n     *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n     */\n    pluralize: function (str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n\n    /**\n     * This function adds singularization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @returns {String} Plural English language nouns are returned in singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.singularize( 'people' ); // === 'person'\n     *     inflection.singularize( 'octopuses' ); // === 'octopus'\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\n     */\n    singularize: function (str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n\n    /**\n     * This function will pluralize or singularlize a String appropriately based on a number value\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Number} count The number to base pluralization off of.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.inflect( 'people' 1 ); // === 'person'\n     *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n     *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n     *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n     *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n     *     inflection.inflect( 'person', 2 ); // === 'people'\n     *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n     *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n     *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n     */\n    inflect: function (str, count, singular, plural) {\n      count = parseFloat(count, 10);\n      if (isNaN(count)) return str;\n\n      if (count === 1) {\n        return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n      } else {\n        return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n      }\n    },\n\n    /**\n     * This function adds camelization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in camel case.\n     *                  additionally '/' is translated to '::'\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n     */\n    camelize: function (str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n\n        str_path[i] = str_arr.join('');\n      }\n\n      return str_path.join('::');\n    },\n\n    /**\n     * This function adds underscore support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n     *                  Passing true will return as entered.\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\n     *                  additionally '::' is translated to '/'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'MP', true ); // === 'MP'\n     */\n    underscore: function (str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n\n      return str_path.join('/').toLowerCase();\n    },\n\n    /**\n     * This function adds humanize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in humanized form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n     */\n    humanize: function (str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n\n      return str;\n    },\n\n    /**\n     * This function adds capitalization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} All characters will be lower case and the first will be upper.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n     */\n    capitalize: function (str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n\n    /**\n     * This function replaces underscores with dashes in the string.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Replaces all spaces or underscores with dashes.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n     */\n    dasherize: function (str) {\n      return str.replace(space_or_underbar, '-');\n    },\n\n    /**\n     * This function adds titleize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Capitalizes words as you would for a book title.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n     */\n    titleize: function (str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n\n        str_arr[i] = d.join('-');\n      }\n\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n\n    /**\n     * This function adds demodulize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n     */\n    demodulize: function (str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n\n    /**\n     * This function adds tableize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return camel cased words into their underscored plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n     */\n    tableize: function (str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n\n    /**\n     * This function adds classification support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n     */\n    classify: function (str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n\n    /**\n     * This function adds foreign key support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                   you can pass true to skip it.(optional)\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n     */\n    foreign_key: function (str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n\n    /**\n     * This function adds ordinalize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return all found numbers their sequence like '22nd'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n     */\n    ordinalize: function (str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n\n          str_arr[i] += suf;\n        }\n      }\n\n      return str_arr.join(' ');\n    },\n\n    /**\n     * This function performs multiple inflection methods on a string\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Array} arr An array of inflection methods.\n     * @returns {String}\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n     */\n    transform: function (str, arr) {\n      var i = 0;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        var method = arr[i];\n\n        if (inflector.hasOwnProperty(method)) {\n          str = inflector[method](str);\n        }\n      }\n\n      return str;\n    }\n  };\n  /**\n   * @public\n   */\n\n  inflector.version = '1.13.1';\n  return inflector;\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","inflection","uncountable_words","regex","plural","men","RegExp","people","children","tia","analyses","drives","hives","curves","lrves","aves","foves","movies","aeiouyies","series","xes","mice","buses","oes","shoes","crises","octopuses","aliases","summonses","oxen","matrices","vertices","feet","teeth","geese","quizzes","whereases","criteria","genera","ss","s","singular","man","person","child","drive","ox","axis","octopus","alias","summons","bus","buffalo","tium","sis","ffe","hive","aeiouyy","x","matrix","vertex","mouse","foot","tooth","goose","quiz","whereas","criterion","genus","common","plural_rules","singular_rules","non_titlecased_words","id_suffix","underbar","space_or_underbar","uppercase","underbar_prefix","inflector","_apply_rules","str","rules","skip","override","ignore","indexOf","toLowerCase","i","j","length","match","undefined","replace","arr","item","from_index","compare_func","index","pluralize","singularize","inflect","count","parseFloat","isNaN","camelize","low_first_letter","str_path","split","str_arr","init_x","k","l","first","charAt","toUpperCase","substring","join","underscore","all_upper_case","humanize","capitalize","dasherize","titleize","d","demodulize","tableize","classify","foreign_key","drop_id_ubar","ordinalize","parseInt","ltd","ld","suf","transform","method","hasOwnProperty","version"],"sources":["/app/node_modules/inflection/lib/inflection.js"],"sourcesContent":["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n\n    'karate',\n    // 'kindness',\n    'knowledge',\n\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n\n    // 'quality',\n    // 'quantity',\n    'quartz',\n\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n\n    // 'yeast',\n    'yoga',\n\n    'zinc',\n    'zoology'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural : {\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\n      drives    : new RegExp( '(drive)s$'                      , 'gi' ),\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\n      octopuses : new RegExp( '(octop|vir)uses$'               , 'gi' ),\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\n      summonses : new RegExp( '^(summons|bonus)es$'            , 'gi' ),\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\n      s         : new RegExp( 's$'                             , 'gi' )\n    },\n\n    singular : {\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\n      child     : new RegExp( '(child)$'                     , 'gi' ),\n      drive     : new RegExp( '(drive)$'                     , 'gi' ),\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\n      summons   : new RegExp( '^(summons|bonus)$'            , 'gi' ),\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\n      s         : new RegExp( 's$'                           , 'gi' ),\n      common    : new RegExp( '$'                            , 'gi' )\n    }\n  };\n\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ regex.plural.men       ],\n    [ regex.plural.people    ],\n    [ regex.plural.children  ],\n    [ regex.plural.tia       ],\n    [ regex.plural.analyses  ],\n    [ regex.plural.drives    ],\n    [ regex.plural.hives     ],\n    [ regex.plural.curves    ],\n    [ regex.plural.lrves     ],\n    [ regex.plural.foves     ],\n    [ regex.plural.aeiouyies ],\n    [ regex.plural.series    ],\n    [ regex.plural.movies    ],\n    [ regex.plural.xes       ],\n    [ regex.plural.mice      ],\n    [ regex.plural.buses     ],\n    [ regex.plural.oes       ],\n    [ regex.plural.shoes     ],\n    [ regex.plural.crises    ],\n    [ regex.plural.octopuses ],\n    [ regex.plural.aliases   ],\n    [ regex.plural.summonses ],\n    [ regex.plural.oxen      ],\n    [ regex.plural.matrices  ],\n    [ regex.plural.feet      ],\n    [ regex.plural.teeth     ],\n    [ regex.plural.geese     ],\n    [ regex.plural.quizzes   ],\n    [ regex.plural.whereases ],\n    [ regex.plural.criteria  ],\n    [ regex.plural.genera    ],\n\n    // original rule\n    [ regex.singular.man      , '$1en' ],\n    [ regex.singular.person   , '$1ople' ],\n    [ regex.singular.child    , '$1ren' ],\n    [ regex.singular.drive    , '$1s' ],\n    [ regex.singular.ox       , '$1en' ],\n    [ regex.singular.axis     , '$1es' ],\n    [ regex.singular.octopus  , '$1uses' ],\n    [ regex.singular.alias    , '$1es' ],\n    [ regex.singular.summons  , '$1es' ],\n    [ regex.singular.bus      , '$1ses' ],\n    [ regex.singular.buffalo  , '$1oes' ],\n    [ regex.singular.tium     , '$1a' ],\n    [ regex.singular.sis      , 'ses' ],\n    [ regex.singular.ffe      , '$1$2ves' ],\n    [ regex.singular.hive     , '$1ves' ],\n    [ regex.singular.aeiouyy  , '$1ies' ],\n    [ regex.singular.matrix   , '$1ices' ],\n    [ regex.singular.vertex   , '$1ices' ],\n    [ regex.singular.x        , '$1es' ],\n    [ regex.singular.mouse    , '$1ice' ],\n    [ regex.singular.foot     , 'feet' ],\n    [ regex.singular.tooth    , 'teeth' ],\n    [ regex.singular.goose    , 'geese' ],\n    [ regex.singular.quiz     , '$1zes' ],\n    [ regex.singular.whereas  , '$1es' ],\n    [ regex.singular.criterion, '$1a' ],\n    [ regex.singular.genus    , 'genera' ],\n\n    [ regex.singular.s     , 's' ],\n    [ regex.singular.common, 's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ regex.singular.man     ],\n    [ regex.singular.person  ],\n    [ regex.singular.child   ],\n    [ regex.singular.drive   ],\n    [ regex.singular.ox      ],\n    [ regex.singular.axis    ],\n    [ regex.singular.octopus ],\n    [ regex.singular.alias   ],\n    [ regex.singular.summons ],\n    [ regex.singular.bus     ],\n    [ regex.singular.buffalo ],\n    [ regex.singular.tium    ],\n    [ regex.singular.sis     ],\n    [ regex.singular.ffe     ],\n    [ regex.singular.hive    ],\n    [ regex.singular.aeiouyy ],\n    [ regex.singular.x       ],\n    [ regex.singular.matrix  ],\n    [ regex.singular.mouse   ],\n    [ regex.singular.foot    ],\n    [ regex.singular.tooth   ],\n    [ regex.singular.goose   ],\n    [ regex.singular.quiz    ],\n    [ regex.singular.whereas ],\n    [ regex.singular.criterion ],\n    [ regex.singular.genus ],\n\n    // original rule\n    [ regex.plural.men      , '$1an' ],\n    [ regex.plural.people   , '$1rson' ],\n    [ regex.plural.children , '$1' ],\n    [ regex.plural.drives   , '$1'],\n    [ regex.plural.genera   , 'genus'],\n    [ regex.plural.criteria , '$1on'],\n    [ regex.plural.tia      , '$1um' ],\n    [ regex.plural.analyses , '$1$2sis' ],\n    [ regex.plural.hives    , '$1ve' ],\n    [ regex.plural.curves   , '$1' ],\n    [ regex.plural.lrves    , '$1f' ],\n    [ regex.plural.aves     , '$1ve' ],\n    [ regex.plural.foves    , '$1fe' ],\n    [ regex.plural.movies   , '$1ovie' ],\n    [ regex.plural.aeiouyies, '$1y' ],\n    [ regex.plural.series   , '$1eries' ],\n    [ regex.plural.xes      , '$1' ],\n    [ regex.plural.mice     , '$1ouse' ],\n    [ regex.plural.buses    , '$1' ],\n    [ regex.plural.oes      , '$1' ],\n    [ regex.plural.shoes    , '$1' ],\n    [ regex.plural.crises   , '$1is' ],\n    [ regex.plural.octopuses, '$1us' ],\n    [ regex.plural.aliases  , '$1' ],\n    [ regex.plural.summonses, '$1' ],\n    [ regex.plural.oxen     , '$1' ],\n    [ regex.plural.matrices , '$1ix' ],\n    [ regex.plural.vertices , '$1ex' ],\n    [ regex.plural.feet     , 'foot' ],\n    [ regex.plural.teeth    , 'tooth' ],\n    [ regex.plural.geese    , 'goose' ],\n    [ regex.plural.quizzes  , '$1' ],\n    [ regex.plural.whereases, '$1' ],\n\n    [ regex.plural.ss, 'ss' ],\n    [ regex.plural.s , '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopuses'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopuses' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n  /**\n   * This function will pluralize or singularlize a String appropriately based on a number value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopuses' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'inches', 1.5 ); // === 'inches'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopuses'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */\n    inflect : function ( str, count, singular, plural ){\n      count = parseFloat( count, 10 );\n\n      if( isNaN( count )) return str;\n\n      if( count === 1 ){\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n      }else{\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n      }\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( inflector.hasOwnProperty( method )){\n          str = inflector[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.13.1';\n\n  return inflector;\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}