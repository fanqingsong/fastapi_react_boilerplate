{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\n\nvar regexTester = require('../helpers/regexTester');\n\nvar isPrimitive = require('../helpers/isPrimitive');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex); // whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\n\nvar ws = ['\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003', '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028', '\\u2029\\uFEFF'].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\n\nvar $trim = function (value) {\n  return $replace(value, trimRegex, '');\n};\n\nvar ToPrimitive = require('./ToPrimitive'); // https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n\n\nmodule.exports = function ToNumber(argument) {\n  var value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n\n  if (typeof value === 'symbol') {\n    throw new $TypeError('Cannot convert a Symbol value to a number');\n  }\n\n  if (typeof value === 'bigint') {\n    throw new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n  }\n\n  if (typeof value === 'string') {\n    if (isBinary(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 2));\n    } else if (isOctal(value)) {\n      return ToNumber($parseInteger($strSlice(value, 2), 8));\n    } else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n      return NaN;\n    }\n\n    var trimmed = $trim(value);\n\n    if (trimmed !== value) {\n      return ToNumber(trimmed);\n    }\n  }\n\n  return $Number(value);\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$Number","$RegExp","$parseInteger","callBound","regexTester","isPrimitive","$strSlice","isBinary","isOctal","isInvalidHexLiteral","nonWS","join","nonWSregex","hasNonWS","ws","trimRegex","RegExp","$replace","$trim","value","ToPrimitive","module","exports","ToNumber","argument","NaN","trimmed"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/es-abstract/2021/ToNumber.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('../helpers/regexTester');\nvar isPrimitive = require('../helpers/isPrimitive');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\n// whitespace from: https://es5.github.io/#x15.5.4.20\n// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324\nvar ws = [\n\t'\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003',\n\t'\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028',\n\t'\\u2029\\uFEFF'\n].join('');\nvar trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');\nvar $replace = callBound('String.prototype.replace');\nvar $trim = function (value) {\n\treturn $replace(value, trimRegex, '');\n};\n\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-tonumber\n\nmodule.exports = function ToNumber(argument) {\n\tvar value = isPrimitive(argument) ? argument : ToPrimitive(argument, $Number);\n\tif (typeof value === 'symbol') {\n\t\tthrow new $TypeError('Cannot convert a Symbol value to a number');\n\t}\n\tif (typeof value === 'bigint') {\n\t\tthrow new $TypeError('Conversion from \\'BigInt\\' to \\'number\\' is not allowed.');\n\t}\n\tif (typeof value === 'string') {\n\t\tif (isBinary(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 2));\n\t\t} else if (isOctal(value)) {\n\t\t\treturn ToNumber($parseInteger($strSlice(value, 2), 8));\n\t\t} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {\n\t\t\treturn NaN;\n\t\t}\n\t\tvar trimmed = $trim(value);\n\t\tif (trimmed !== value) {\n\t\t\treturn ToNumber(trimmed);\n\t\t}\n\n\t}\n\treturn $Number(value);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}