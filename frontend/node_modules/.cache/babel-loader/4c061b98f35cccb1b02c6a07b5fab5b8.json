{"ast":null,"code":"import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultPagination = {\n  page: 1,\n  perPage: 25\n};\nvar defaultSort = {\n  field: 'id',\n  order: 'DESC'\n};\nvar defaultFilter = {};\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\n\nvar useGetList = function (resource, pagination, sort, filter, options) {\n  if (pagination === void 0) {\n    pagination = defaultPagination;\n  }\n\n  if (sort === void 0) {\n    sort = defaultSort;\n  }\n\n  if (filter === void 0) {\n    filter = defaultFilter;\n  }\n\n  var requestSignature = JSON.stringify({\n    pagination: pagination,\n    sort: sort,\n    filter: filter\n  });\n\n  var _a = useQueryWithStore({\n    type: 'getList',\n    resource: resource,\n    payload: {\n      pagination: pagination,\n      sort: sort,\n      filter: filter\n    }\n  }, options, // ids and data selector\n  function (state) {\n    return {\n      ids: get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], null),\n      allRecords: get(state.admin.resources, [resource, 'data'], defaultData)\n    };\n  }, // total selector (may return undefined)\n  function (state) {\n    return get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'total']);\n  }, isDataLoaded),\n      _b = _a.data,\n      ids = _b.ids,\n      allRecords = _b.allRecords,\n      total = _a.total,\n      error = _a.error,\n      loading = _a.loading,\n      loaded = _a.loaded,\n      refetch = _a.refetch;\n\n  var data = useMemo(function () {\n    return ids === null ? defaultData : ids.map(function (id) {\n      return allRecords[id];\n    }).reduce(function (acc, record) {\n      if (!record) return acc;\n      acc[record.id] = record;\n      return acc;\n    }, {});\n  }, [ids, allRecords]);\n  return {\n    data: data,\n    ids: ids === null ? defaultIds : ids,\n    total: total,\n    error: error,\n    loading: loading,\n    loaded: loaded,\n    refetch: refetch\n  };\n};\n\nvar isDataLoaded = function (data) {\n  return data.ids !== null;\n};\n\nexport default useGetList;","map":{"version":3,"names":["useMemo","get","useQueryWithStore","defaultPagination","page","perPage","defaultSort","field","order","defaultFilter","defaultIds","defaultData","useGetList","resource","pagination","sort","filter","options","requestSignature","JSON","stringify","_a","type","payload","state","ids","admin","resources","allRecords","isDataLoaded","_b","data","total","error","loading","loaded","refetch","map","id","reduce","acc","record"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/dataProvider/useGetList.js"],"sourcesContent":["import { useMemo } from 'react';\nimport get from 'lodash/get';\nimport { useQueryWithStore } from './useQueryWithStore';\nvar defaultPagination = { page: 1, perPage: 25 };\nvar defaultSort = { field: 'id', order: 'DESC' };\nvar defaultFilter = {};\nvar defaultIds = [];\nvar defaultData = {};\n/**\n * Call the dataProvider.getList() method and return the resolved result\n * as well as the loading state.\n *\n * The return value updates according to the request state:\n *\n * - start: { loading: true, loaded: false, refetch }\n * - success: { data: [data from store], ids: [ids from response], total: [total from response], loading: false, loaded: true, refetch }\n * - error: { error: [error from response], loading: false, loaded: false, refetch }\n *\n * This hook will return the cached result when called a second time\n * with the same parameters, until the response arrives.\n *\n * @param {string} resource The resource name, e.g. 'posts'\n * @param {Object} pagination The request pagination { page, perPage }, e.g. { page: 1, perPage: 10 }\n * @param {Object} sort The request sort { field, order }, e.g. { field: 'id', order: 'DESC' }\n * @param {Object} filter The request filters, e.g. { title: 'hello, world' }\n * @param {Object} options Options object to pass to the dataProvider.\n * @param {boolean} options.enabled Flag to conditionally run the query. If it's false, the query will not run\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. { onSuccess: { refresh: true } }\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n *\n * @returns The current request state. Destructure as { data, total, ids, error, loading, loaded, refetch }.\n *\n * @example\n *\n * import { useGetList } from 'react-admin';\n *\n * const LatestNews = () => {\n *     const { data, ids, loading, error } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         { field: 'published_at', order: 'DESC' }\n *     );\n *     if (loading) { return <Loading />; }\n *     if (error) { return <p>ERROR</p>; }\n *     return <ul>{ids.map(id =>\n *         <li key={id}>{data[id].title}</li>\n *     )}</ul>;\n * };\n */\nvar useGetList = function (resource, pagination, sort, filter, options) {\n    if (pagination === void 0) { pagination = defaultPagination; }\n    if (sort === void 0) { sort = defaultSort; }\n    if (filter === void 0) { filter = defaultFilter; }\n    var requestSignature = JSON.stringify({ pagination: pagination, sort: sort, filter: filter });\n    var _a = useQueryWithStore({ type: 'getList', resource: resource, payload: { pagination: pagination, sort: sort, filter: filter } }, options, \n    // ids and data selector\n    function (state) { return ({\n        ids: get(state.admin.resources, [resource, 'list', 'cachedRequests', requestSignature, 'ids'], null),\n        allRecords: get(state.admin.resources, [resource, 'data'], defaultData),\n    }); }, \n    // total selector (may return undefined)\n    function (state) {\n        return get(state.admin.resources, [\n            resource,\n            'list',\n            'cachedRequests',\n            requestSignature,\n            'total',\n        ]);\n    }, isDataLoaded), _b = _a.data, ids = _b.ids, allRecords = _b.allRecords, total = _a.total, error = _a.error, loading = _a.loading, loaded = _a.loaded, refetch = _a.refetch;\n    var data = useMemo(function () {\n        return ids === null\n            ? defaultData\n            : ids\n                .map(function (id) { return allRecords[id]; })\n                .reduce(function (acc, record) {\n                if (!record)\n                    return acc;\n                acc[record.id] = record;\n                return acc;\n            }, {});\n    }, [ids, allRecords]);\n    return {\n        data: data,\n        ids: ids === null ? defaultIds : ids,\n        total: total,\n        error: error,\n        loading: loading,\n        loaded: loaded,\n        refetch: refetch,\n    };\n};\nvar isDataLoaded = function (data) { return data.ids !== null; };\nexport default useGetList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}