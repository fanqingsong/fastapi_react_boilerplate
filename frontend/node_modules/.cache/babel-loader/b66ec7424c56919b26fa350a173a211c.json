{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\n\nvar useLogout = function () {\n  var authProvider = useAuthProvider();\n  var dispatch = useDispatch();\n  /**\n   * We need the current location to pass in the router state\n   * so that the login hook knows where to redirect to as next route after login.\n   *\n   * But if we used useLocation to get it, the logout function\n   * would be rebuilt each time the user changes location. Consequently, that\n   * would force a rerender of all components using this hook upon navigation\n   * (CoreAdminRouter for example).\n   *\n   * To avoid that, we read the location directly from history which is mutable.\n   * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n   */\n\n  var history = useHistory();\n  var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    if (redirectToCurrentLocationAfterLogin === void 0) {\n      redirectToCurrentLocationAfterLogin = true;\n    }\n\n    return authProvider.logout(params).then(function (redirectToFromProvider) {\n      if (redirectToFromProvider === false) {\n        dispatch(clearState()); // do not redirect\n\n        return;\n      } // redirectTo can contain a query string, e.g. '/login?foo=bar'\n      // we must split the redirectTo to pass a structured location to history.push()\n\n\n      var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n      var newLocation = {\n        pathname: redirectToParts[0]\n      };\n\n      if (redirectToCurrentLocationAfterLogin && history.location && history.location.pathname) {\n        newLocation.state = {\n          nextPathname: history.location.pathname,\n          nextSearch: history.location.search\n        };\n      }\n\n      if (redirectToParts[1]) {\n        newLocation.search = redirectToParts[1];\n      }\n\n      history.push(newLocation);\n      dispatch(clearState());\n      return redirectToFromProvider;\n    });\n  }, [authProvider, history, dispatch]);\n  var logoutWithoutProvider = useCallback(function (_) {\n    history.push({\n      pathname: defaultAuthParams.loginUrl,\n      state: {\n        nextPathname: history.location && history.location.pathname\n      }\n    });\n    dispatch(clearState());\n    return Promise.resolve();\n  }, [dispatch, history]);\n  return authProvider ? logout : logoutWithoutProvider;\n};\n\nexport default useLogout;","map":{"version":3,"names":["useCallback","useDispatch","useAuthProvider","defaultAuthParams","clearState","useHistory","useLogout","authProvider","dispatch","history","logout","params","redirectTo","redirectToCurrentLocationAfterLogin","loginUrl","then","redirectToFromProvider","redirectToParts","split","newLocation","pathname","location","state","nextPathname","nextSearch","search","push","logoutWithoutProvider","_","Promise","resolve"],"sources":["/app/node_modules/ra-core/esm/auth/useLogout.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport { clearState } from '../actions/clearActions';\nimport { useHistory } from 'react-router-dom';\n/**\n * Get a callback for calling the authProvider.logout() method,\n * redirect to the login page, and clear the Redux state.\n *\n * @see useAuthProvider\n *\n * @returns {Function} logout callback\n *\n * @example\n *\n * import { useLogout } from 'react-admin';\n *\n * const LogoutButton = () => {\n *     const logout = useLogout();\n *     const handleClick = () => logout();\n *     return <button onClick={handleClick}>Logout</button>;\n * }\n */\nvar useLogout = function () {\n    var authProvider = useAuthProvider();\n    var dispatch = useDispatch();\n    /**\n     * We need the current location to pass in the router state\n     * so that the login hook knows where to redirect to as next route after login.\n     *\n     * But if we used useLocation to get it, the logout function\n     * would be rebuilt each time the user changes location. Consequently, that\n     * would force a rerender of all components using this hook upon navigation\n     * (CoreAdminRouter for example).\n     *\n     * To avoid that, we read the location directly from history which is mutable.\n     * See: https://reacttraining.com/react-router/web/api/history/history-is-mutable\n     */\n    var history = useHistory();\n    var logout = useCallback(function (params, redirectTo, redirectToCurrentLocationAfterLogin) {\n        if (params === void 0) { params = {}; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        if (redirectToCurrentLocationAfterLogin === void 0) { redirectToCurrentLocationAfterLogin = true; }\n        return authProvider.logout(params).then(function (redirectToFromProvider) {\n            if (redirectToFromProvider === false) {\n                dispatch(clearState());\n                // do not redirect\n                return;\n            }\n            // redirectTo can contain a query string, e.g. '/login?foo=bar'\n            // we must split the redirectTo to pass a structured location to history.push()\n            var redirectToParts = (redirectToFromProvider || redirectTo).split('?');\n            var newLocation = {\n                pathname: redirectToParts[0],\n            };\n            if (redirectToCurrentLocationAfterLogin &&\n                history.location &&\n                history.location.pathname) {\n                newLocation.state = {\n                    nextPathname: history.location.pathname,\n                    nextSearch: history.location.search,\n                };\n            }\n            if (redirectToParts[1]) {\n                newLocation.search = redirectToParts[1];\n            }\n            history.push(newLocation);\n            dispatch(clearState());\n            return redirectToFromProvider;\n        });\n    }, [authProvider, history, dispatch]);\n    var logoutWithoutProvider = useCallback(function (_) {\n        history.push({\n            pathname: defaultAuthParams.loginUrl,\n            state: {\n                nextPathname: history.location && history.location.pathname,\n            },\n        });\n        dispatch(clearState());\n        return Promise.resolve();\n    }, [dispatch, history]);\n    return authProvider ? logout : logoutWithoutProvider;\n};\nexport default useLogout;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,YAAY;EACxB,IAAIC,YAAY,GAAGL,eAAe,EAAlC;EACA,IAAIM,QAAQ,GAAGP,WAAW,EAA1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,IAAIQ,OAAO,GAAGJ,UAAU,EAAxB;EACA,IAAIK,MAAM,GAAGV,WAAW,CAAC,UAAUW,MAAV,EAAkBC,UAAlB,EAA8BC,mCAA9B,EAAmE;IACxF,IAAIF,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIC,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAGT,iBAAiB,CAACW,QAA/B;IAA0C;;IACvE,IAAID,mCAAmC,KAAK,KAAK,CAAjD,EAAoD;MAAEA,mCAAmC,GAAG,IAAtC;IAA6C;;IACnG,OAAON,YAAY,CAACG,MAAb,CAAoBC,MAApB,EAA4BI,IAA5B,CAAiC,UAAUC,sBAAV,EAAkC;MACtE,IAAIA,sBAAsB,KAAK,KAA/B,EAAsC;QAClCR,QAAQ,CAACJ,UAAU,EAAX,CAAR,CADkC,CAElC;;QACA;MACH,CALqE,CAMtE;MACA;;;MACA,IAAIa,eAAe,GAAG,CAACD,sBAAsB,IAAIJ,UAA3B,EAAuCM,KAAvC,CAA6C,GAA7C,CAAtB;MACA,IAAIC,WAAW,GAAG;QACdC,QAAQ,EAAEH,eAAe,CAAC,CAAD;MADX,CAAlB;;MAGA,IAAIJ,mCAAmC,IACnCJ,OAAO,CAACY,QADR,IAEAZ,OAAO,CAACY,QAAR,CAAiBD,QAFrB,EAE+B;QAC3BD,WAAW,CAACG,KAAZ,GAAoB;UAChBC,YAAY,EAAEd,OAAO,CAACY,QAAR,CAAiBD,QADf;UAEhBI,UAAU,EAAEf,OAAO,CAACY,QAAR,CAAiBI;QAFb,CAApB;MAIH;;MACD,IAAIR,eAAe,CAAC,CAAD,CAAnB,EAAwB;QACpBE,WAAW,CAACM,MAAZ,GAAqBR,eAAe,CAAC,CAAD,CAApC;MACH;;MACDR,OAAO,CAACiB,IAAR,CAAaP,WAAb;MACAX,QAAQ,CAACJ,UAAU,EAAX,CAAR;MACA,OAAOY,sBAAP;IACH,CA1BM,CAAP;EA2BH,CA/BuB,EA+BrB,CAACT,YAAD,EAAeE,OAAf,EAAwBD,QAAxB,CA/BqB,CAAxB;EAgCA,IAAImB,qBAAqB,GAAG3B,WAAW,CAAC,UAAU4B,CAAV,EAAa;IACjDnB,OAAO,CAACiB,IAAR,CAAa;MACTN,QAAQ,EAAEjB,iBAAiB,CAACW,QADnB;MAETQ,KAAK,EAAE;QACHC,YAAY,EAAEd,OAAO,CAACY,QAAR,IAAoBZ,OAAO,CAACY,QAAR,CAAiBD;MADhD;IAFE,CAAb;IAMAZ,QAAQ,CAACJ,UAAU,EAAX,CAAR;IACA,OAAOyB,OAAO,CAACC,OAAR,EAAP;EACH,CATsC,EASpC,CAACtB,QAAD,EAAWC,OAAX,CAToC,CAAvC;EAUA,OAAOF,YAAY,GAAGG,MAAH,GAAYiB,qBAA/B;AACH,CA3DD;;AA4DA,eAAerB,SAAf"},"metadata":{},"sourceType":"module"}