{"ast":null,"code":"import { useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\nvar defaultRecords = [];\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\n\nvar useRecordSelection = function (resource) {\n  var dispatch = useDispatch();\n  var selectedIds = useSelector(function (reduxState) {\n    return reduxState.admin.resources[resource] ? reduxState.admin.resources[resource].list.selectedIds : defaultRecords;\n  }, shallowEqual);\n  var selectionModifiers = useMemo(function () {\n    return {\n      select: function (newIds) {\n        dispatch(setListSelectedIds(resource, newIds));\n      },\n      toggle: function (id) {\n        dispatch(toggleListItem(resource, id));\n      },\n      clearSelection: function () {\n        dispatch(setListSelectedIds(resource, []));\n      }\n    };\n  }, [dispatch, resource]);\n  return [selectedIds, selectionModifiers];\n};\n\nexport default useRecordSelection;","map":{"version":3,"names":["useMemo","useSelector","useDispatch","shallowEqual","setListSelectedIds","toggleListItem","defaultRecords","useRecordSelection","resource","dispatch","selectedIds","reduxState","admin","resources","list","selectionModifiers","select","newIds","toggle","id","clearSelection"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/controller/useRecordSelection.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { setListSelectedIds, toggleListItem } from '../actions/listActions';\nvar defaultRecords = [];\n/**\n * Get the list of selected items for a resource, and callbacks to change the selection\n *\n * @param resource The resource name, e.g. 'posts'\n *\n * @returns {Object} Destructure as [selectedIds, { select, toggle, clearSelection }].\n */\nvar useRecordSelection = function (resource) {\n    var dispatch = useDispatch();\n    var selectedIds = useSelector(function (reduxState) {\n        return reduxState.admin.resources[resource]\n            ? reduxState.admin.resources[resource].list.selectedIds\n            : defaultRecords;\n    }, shallowEqual);\n    var selectionModifiers = useMemo(function () { return ({\n        select: function (newIds) {\n            dispatch(setListSelectedIds(resource, newIds));\n        },\n        toggle: function (id) {\n            dispatch(toggleListItem(resource, id));\n        },\n        clearSelection: function () {\n            dispatch(setListSelectedIds(resource, []));\n        },\n    }); }, [dispatch, resource]);\n    return [selectedIds, selectionModifiers];\n};\nexport default useRecordSelection;\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAuD,aAAvD;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,wBAAnD;AACA,IAAIC,cAAc,GAAG,EAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,UAAUC,QAAV,EAAoB;EACzC,IAAIC,QAAQ,GAAGP,WAAW,EAA1B;EACA,IAAIQ,WAAW,GAAGT,WAAW,CAAC,UAAUU,UAAV,EAAsB;IAChD,OAAOA,UAAU,CAACC,KAAX,CAAiBC,SAAjB,CAA2BL,QAA3B,IACDG,UAAU,CAACC,KAAX,CAAiBC,SAAjB,CAA2BL,QAA3B,EAAqCM,IAArC,CAA0CJ,WADzC,GAEDJ,cAFN;EAGH,CAJ4B,EAI1BH,YAJ0B,CAA7B;EAKA,IAAIY,kBAAkB,GAAGf,OAAO,CAAC,YAAY;IAAE,OAAQ;MACnDgB,MAAM,EAAE,UAAUC,MAAV,EAAkB;QACtBR,QAAQ,CAACL,kBAAkB,CAACI,QAAD,EAAWS,MAAX,CAAnB,CAAR;MACH,CAHkD;MAInDC,MAAM,EAAE,UAAUC,EAAV,EAAc;QAClBV,QAAQ,CAACJ,cAAc,CAACG,QAAD,EAAWW,EAAX,CAAf,CAAR;MACH,CANkD;MAOnDC,cAAc,EAAE,YAAY;QACxBX,QAAQ,CAACL,kBAAkB,CAACI,QAAD,EAAW,EAAX,CAAnB,CAAR;MACH;IATkD,CAAR;EAU1C,CAV2B,EAUzB,CAACC,QAAD,EAAWD,QAAX,CAVyB,CAAhC;EAWA,OAAO,CAACE,WAAD,EAAcK,kBAAd,CAAP;AACH,CAnBD;;AAoBA,eAAeR,kBAAf"},"metadata":{},"sourceType":"module"}