{"ast":null,"code":"import { useContext, useCallback } from 'react';\nimport { TranslationContext } from './TranslationContext';\nimport { useUpdateLoading } from '../loading';\nimport { useNotify } from '../sideEffect';\n/**\n * Set the current locale using the TranslationContext\n *\n * This hook re-renders when the locale changes.\n *\n * @example\n *\n * import { useSetLocale } from 'react-admin';\n *\n * const availableLanguages = {\n *     en: 'English',\n *     fr: 'Français',\n * }\n * const LanguageSwitcher = () => {\n *     const setLocale = useSetLocale();\n *     return (\n *         <ul>{\n *             Object.keys(availableLanguages).map(locale => {\n *                  <li key={locale} onClick={() => setLocale(locale)}>\n *                      {availableLanguages[locale]}\n *                  </li>\n *              })\n *         }</ul>\n *     );\n * }\n */\n\nvar useSetLocale = function () {\n  var _a = useContext(TranslationContext),\n      setLocale = _a.setLocale,\n      i18nProvider = _a.i18nProvider;\n\n  var _b = useUpdateLoading(),\n      startLoading = _b.startLoading,\n      stopLoading = _b.stopLoading;\n\n  var notify = useNotify();\n  return useCallback(function (newLocale) {\n    return new Promise(function (resolve) {\n      startLoading(); // so we systematically return a Promise for the messages\n      // i18nProvider may return a Promise for language changes,\n\n      resolve(i18nProvider.changeLocale(newLocale));\n    }).then(function () {\n      stopLoading();\n      setLocale(newLocale);\n    }).catch(function (error) {\n      stopLoading();\n      notify('ra.notification.i18n_error', {\n        type: 'warning'\n      });\n      console.error(error);\n    });\n  }, [i18nProvider, notify, setLocale, startLoading, stopLoading]);\n};\n\nexport default useSetLocale;","map":{"version":3,"names":["useContext","useCallback","TranslationContext","useUpdateLoading","useNotify","useSetLocale","_a","setLocale","i18nProvider","_b","startLoading","stopLoading","notify","newLocale","Promise","resolve","changeLocale","then","catch","error","type","console"],"sources":["/app/node_modules/ra-core/esm/i18n/useSetLocale.js"],"sourcesContent":["import { useContext, useCallback } from 'react';\nimport { TranslationContext } from './TranslationContext';\nimport { useUpdateLoading } from '../loading';\nimport { useNotify } from '../sideEffect';\n/**\n * Set the current locale using the TranslationContext\n *\n * This hook re-renders when the locale changes.\n *\n * @example\n *\n * import { useSetLocale } from 'react-admin';\n *\n * const availableLanguages = {\n *     en: 'English',\n *     fr: 'Français',\n * }\n * const LanguageSwitcher = () => {\n *     const setLocale = useSetLocale();\n *     return (\n *         <ul>{\n *             Object.keys(availableLanguages).map(locale => {\n *                  <li key={locale} onClick={() => setLocale(locale)}>\n *                      {availableLanguages[locale]}\n *                  </li>\n *              })\n *         }</ul>\n *     );\n * }\n */\nvar useSetLocale = function () {\n    var _a = useContext(TranslationContext), setLocale = _a.setLocale, i18nProvider = _a.i18nProvider;\n    var _b = useUpdateLoading(), startLoading = _b.startLoading, stopLoading = _b.stopLoading;\n    var notify = useNotify();\n    return useCallback(function (newLocale) {\n        return new Promise(function (resolve) {\n            startLoading();\n            // so we systematically return a Promise for the messages\n            // i18nProvider may return a Promise for language changes,\n            resolve(i18nProvider.changeLocale(newLocale));\n        })\n            .then(function () {\n            stopLoading();\n            setLocale(newLocale);\n        })\n            .catch(function (error) {\n            stopLoading();\n            notify('ra.notification.i18n_error', { type: 'warning' });\n            console.error(error);\n        });\n    }, [i18nProvider, notify, setLocale, startLoading, stopLoading]);\n};\nexport default useSetLocale;\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,YAAY;EAC3B,IAAIC,EAAE,GAAGN,UAAU,CAACE,kBAAD,CAAnB;EAAA,IAAyCK,SAAS,GAAGD,EAAE,CAACC,SAAxD;EAAA,IAAmEC,YAAY,GAAGF,EAAE,CAACE,YAArF;;EACA,IAAIC,EAAE,GAAGN,gBAAgB,EAAzB;EAAA,IAA6BO,YAAY,GAAGD,EAAE,CAACC,YAA/C;EAAA,IAA6DC,WAAW,GAAGF,EAAE,CAACE,WAA9E;;EACA,IAAIC,MAAM,GAAGR,SAAS,EAAtB;EACA,OAAOH,WAAW,CAAC,UAAUY,SAAV,EAAqB;IACpC,OAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmB;MAClCL,YAAY,GADsB,CAElC;MACA;;MACAK,OAAO,CAACP,YAAY,CAACQ,YAAb,CAA0BH,SAA1B,CAAD,CAAP;IACH,CALM,EAMFI,IANE,CAMG,YAAY;MAClBN,WAAW;MACXJ,SAAS,CAACM,SAAD,CAAT;IACH,CATM,EAUFK,KAVE,CAUI,UAAUC,KAAV,EAAiB;MACxBR,WAAW;MACXC,MAAM,CAAC,4BAAD,EAA+B;QAAEQ,IAAI,EAAE;MAAR,CAA/B,CAAN;MACAC,OAAO,CAACF,KAAR,CAAcA,KAAd;IACH,CAdM,CAAP;EAeH,CAhBiB,EAgBf,CAACX,YAAD,EAAeI,MAAf,EAAuBL,SAAvB,EAAkCG,YAAlC,EAAgDC,WAAhD,CAhBe,CAAlB;AAiBH,CArBD;;AAsBA,eAAeN,YAAf"},"metadata":{},"sourceType":"module"}