{"ast":null,"code":"import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\n\nvar useCheckAuth = function () {\n  var authProvider = useAuthProvider();\n  var notify = useNotify();\n  var logout = useLogout();\n  var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (logoutOnFailure === void 0) {\n      logoutOnFailure = true;\n    }\n\n    if (redirectTo === void 0) {\n      redirectTo = defaultAuthParams.loginUrl;\n    }\n\n    if (disableNotification === void 0) {\n      disableNotification = false;\n    }\n\n    return authProvider.checkAuth(params).catch(function (error) {\n      if (logoutOnFailure) {\n        logout({}, error && error.redirectTo ? error.redirectTo : redirectTo);\n        var shouldSkipNotify = disableNotification || error && error.message === false;\n        !shouldSkipNotify && notify(getErrorMessage(error, 'ra.auth.auth_check_error'), {\n          type: 'warning'\n        });\n      }\n\n      throw error;\n    });\n  }, [authProvider, logout, notify]);\n  return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\n\nvar checkAuthWithoutAuthProvider = function () {\n  return Promise.resolve();\n};\n\nvar getErrorMessage = function (error, defaultMessage) {\n  return typeof error === 'string' ? error : typeof error === 'undefined' || !error.message ? defaultMessage : error.message;\n};\n\nexport default useCheckAuth;","map":{"version":3,"names":["useCallback","useAuthProvider","defaultAuthParams","useLogout","useNotify","useCheckAuth","authProvider","notify","logout","checkAuth","params","logoutOnFailure","redirectTo","disableNotification","loginUrl","catch","error","shouldSkipNotify","message","getErrorMessage","type","checkAuthWithoutAuthProvider","Promise","resolve","defaultMessage"],"sources":["/app/node_modules/ra-core/esm/auth/useCheckAuth.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useAuthProvider, { defaultAuthParams } from './useAuthProvider';\nimport useLogout from './useLogout';\nimport useNotify from '../sideEffect/useNotify';\n/**\n * Get a callback for calling the authProvider.checkAuth() method.\n * In case of rejection, redirects to the login page, displays a notification,\n * and throws an error.\n *\n * This is a low level hook. See those more specialized hooks\n * for common authentication tasks, based on useCheckAuth.\n *\n * @see useAuthenticated\n * @see useAuthState\n *\n * @returns {Function} checkAuth callback\n *\n * @example\n *\n * import { useCheckAuth } from 'react-admin';\n *\n * const MyProtectedPage = () => {\n *     const checkAuth = useCheckAuth();\n *     useEffect(() => {\n *         checkAuth().catch(() => {});\n *     }, []);\n *     return <p>Private content: EZAEZEZAET</p>\n * } // tip: use useAuthenticated() hook instead\n *\n * const MyPage = () => {\n *     const checkAuth = useCheckAuth();\n *     const [authenticated, setAuthenticated] = useState(true); // optimistic auth\n *     useEffect(() => {\n *         checkAuth({}, false)\n *              .then(() => setAuthenticated(true))\n *              .catch(() => setAuthenticated(false));\n *     }, []);\n *     return authenticated ? <Bar /> : <BarNotAuthenticated />;\n * } // tip: use useAuthState() hook instead\n */\nvar useCheckAuth = function () {\n    var authProvider = useAuthProvider();\n    var notify = useNotify();\n    var logout = useLogout();\n    var checkAuth = useCallback(function (params, logoutOnFailure, redirectTo, disableNotification) {\n        if (params === void 0) { params = {}; }\n        if (logoutOnFailure === void 0) { logoutOnFailure = true; }\n        if (redirectTo === void 0) { redirectTo = defaultAuthParams.loginUrl; }\n        if (disableNotification === void 0) { disableNotification = false; }\n        return authProvider.checkAuth(params).catch(function (error) {\n            if (logoutOnFailure) {\n                logout({}, error && error.redirectTo\n                    ? error.redirectTo\n                    : redirectTo);\n                var shouldSkipNotify = disableNotification ||\n                    (error && error.message === false);\n                !shouldSkipNotify &&\n                    notify(getErrorMessage(error, 'ra.auth.auth_check_error'), { type: 'warning' });\n            }\n            throw error;\n        });\n    }, [authProvider, logout, notify]);\n    return authProvider ? checkAuth : checkAuthWithoutAuthProvider;\n};\nvar checkAuthWithoutAuthProvider = function () { return Promise.resolve(); };\nvar getErrorMessage = function (error, defaultMessage) {\n    return typeof error === 'string'\n        ? error\n        : typeof error === 'undefined' || !error.message\n            ? defaultMessage\n            : error.message;\n};\nexport default useCheckAuth;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,IAA0BC,iBAA1B,QAAmD,mBAAnD;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,YAAY;EAC3B,IAAIC,YAAY,GAAGL,eAAe,EAAlC;EACA,IAAIM,MAAM,GAAGH,SAAS,EAAtB;EACA,IAAII,MAAM,GAAGL,SAAS,EAAtB;EACA,IAAIM,SAAS,GAAGT,WAAW,CAAC,UAAUU,MAAV,EAAkBC,eAAlB,EAAmCC,UAAnC,EAA+CC,mBAA/C,EAAoE;IAC5F,IAAIH,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIC,eAAe,KAAK,KAAK,CAA7B,EAAgC;MAAEA,eAAe,GAAG,IAAlB;IAAyB;;IAC3D,IAAIC,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAGV,iBAAiB,CAACY,QAA/B;IAA0C;;IACvE,IAAID,mBAAmB,KAAK,KAAK,CAAjC,EAAoC;MAAEA,mBAAmB,GAAG,KAAtB;IAA8B;;IACpE,OAAOP,YAAY,CAACG,SAAb,CAAuBC,MAAvB,EAA+BK,KAA/B,CAAqC,UAAUC,KAAV,EAAiB;MACzD,IAAIL,eAAJ,EAAqB;QACjBH,MAAM,CAAC,EAAD,EAAKQ,KAAK,IAAIA,KAAK,CAACJ,UAAf,GACLI,KAAK,CAACJ,UADD,GAELA,UAFA,CAAN;QAGA,IAAIK,gBAAgB,GAAGJ,mBAAmB,IACrCG,KAAK,IAAIA,KAAK,CAACE,OAAN,KAAkB,KADhC;QAEA,CAACD,gBAAD,IACIV,MAAM,CAACY,eAAe,CAACH,KAAD,EAAQ,0BAAR,CAAhB,EAAqD;UAAEI,IAAI,EAAE;QAAR,CAArD,CADV;MAEH;;MACD,MAAMJ,KAAN;IACH,CAXM,CAAP;EAYH,CAjB0B,EAiBxB,CAACV,YAAD,EAAeE,MAAf,EAAuBD,MAAvB,CAjBwB,CAA3B;EAkBA,OAAOD,YAAY,GAAGG,SAAH,GAAeY,4BAAlC;AACH,CAvBD;;AAwBA,IAAIA,4BAA4B,GAAG,YAAY;EAAE,OAAOC,OAAO,CAACC,OAAR,EAAP;AAA2B,CAA5E;;AACA,IAAIJ,eAAe,GAAG,UAAUH,KAAV,EAAiBQ,cAAjB,EAAiC;EACnD,OAAO,OAAOR,KAAP,KAAiB,QAAjB,GACDA,KADC,GAED,OAAOA,KAAP,KAAiB,WAAjB,IAAgC,CAACA,KAAK,CAACE,OAAvC,GACIM,cADJ,GAEIR,KAAK,CAACE,OAJhB;AAKH,CAND;;AAOA,eAAeb,YAAf"},"metadata":{},"sourceType":"module"}