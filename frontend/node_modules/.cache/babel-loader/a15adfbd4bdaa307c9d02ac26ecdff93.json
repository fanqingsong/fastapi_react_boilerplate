{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2);\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: false }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\n\nvar useMutation = function (query, options) {\n  var _a = useSafeSetState({\n    data: null,\n    error: null,\n    total: null,\n    loading: false,\n    loaded: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var dataProvider = useDataProvider();\n  var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n  /* eslint-disable react-hooks/exhaustive-deps */\n\n  var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n    var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions) ? dataProviderWithDeclarativeSideEffects : dataProvider;\n    var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n    setState(function (prevState) {\n      return __assign(__assign({}, prevState), {\n        loading: true\n      });\n    });\n    var returnPromise = params.options.returnPromise;\n    var promise = finalDataProvider[params.type].apply(finalDataProvider, typeof params.resource !== 'undefined' ? [params.resource, params.payload, params.options] : [params.payload, params.options]).then(function (response) {\n      var data = response.data,\n          total = response.total;\n      setState({\n        data: data,\n        error: null,\n        loaded: true,\n        loading: false,\n        total: total\n      });\n\n      if (returnPromise) {\n        return response;\n      }\n    }).catch(function (errorFromResponse) {\n      setState({\n        data: null,\n        error: errorFromResponse,\n        loaded: false,\n        loading: false,\n        total: null\n      });\n\n      if (returnPromise) {\n        throw errorFromResponse;\n      }\n    });\n\n    if (returnPromise) {\n      return promise;\n    }\n  }, [// deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n  JSON.stringify({\n    query: query,\n    options: options\n  }), dataProvider, dataProviderWithDeclarativeSideEffects, setState]\n  /* eslint-enable react-hooks/exhaustive-deps */\n  );\n  return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g. [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpdate(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\n\n\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n  if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n    throw new Error('Missing query either at definition or at call time');\n  }\n\n  var event = callTimeQuery;\n  if (callTimeQuery instanceof Event || !!(event === null || event === void 0 ? void 0 : event.preventDefault)) return {\n    type: query.type,\n    resource: query.resource,\n    payload: query.payload,\n    options: sanitizeOptions(options)\n  };\n\n  if (query) {\n    return {\n      type: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.type) || query.type,\n      resource: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.resource) || query.resource,\n      payload: callTimeQuery ? merge({}, query.payload, callTimeQuery.payload) : query.payload,\n      options: callTimeOptions ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions)) : sanitizeOptions(options)\n    };\n  }\n\n  return {\n    type: callTimeQuery.type,\n    resource: callTimeQuery.resource,\n    payload: callTimeQuery.payload,\n    options: options ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions)) : sanitizeOptions(callTimeOptions)\n  };\n};\n\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n  if (!options && !callTimeOptions) return false;\n  if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport) return true;\n  return options && options.withDeclarativeSideEffectsSupport;\n};\n\nvar sanitizeOptions = function (args) {\n  if (!args) return {\n    onSuccess: undefined\n  };\n\n  var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport,\n      options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n\n  return __assign({\n    onSuccess: undefined\n  }, options);\n};\n\nexport default useMutation;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","useCallback","merge","useSafeSetState","useDataProvider","useDataProviderWithDeclarativeSideEffects","useMutation","query","options","_a","data","error","total","loading","loaded","state","setState","dataProvider","dataProviderWithDeclarativeSideEffects","mutate","callTimeQuery","callTimeOptions","finalDataProvider","hasDeclarativeSideEffectsSupport","params","mergeDefinitionAndCallTimeParameters","prevState","returnPromise","promise","type","resource","payload","then","response","catch","errorFromResponse","JSON","stringify","Event","Error","event","preventDefault","sanitizeOptions","withDeclarativeSideEffectsSupport","args","onSuccess","undefined"],"sources":["/app/node_modules/ra-core/esm/dataProvider/useMutation.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { useCallback } from 'react';\nimport merge from 'lodash/merge';\nimport { useSafeSetState } from '../util/hooks';\nimport useDataProvider from './useDataProvider';\nimport useDataProviderWithDeclarativeSideEffects from './useDataProviderWithDeclarativeSideEffects';\n/**\n * Get a callback to fetch the data provider through Redux, usually for mutations.\n *\n * The request starts when the callback is called.\n *\n * useMutation() parameters can be passed:\n *\n * - at definition time\n *\n *       const [mutate] = useMutation(query, options); mutate();\n *\n * - at call time\n *\n *       const [mutate] = useMutation(); mutate(query, options);\n *\n * - both, in which case the definition and call time parameters are merged\n *\n *       const [mutate] = useMutation(query1, options1); mutate(query2, options2);\n *\n * @param {Object} query\n * @param {string} query.type The method called on the data provider, e.g. 'getList', 'getOne'. Can also be a custom method if the dataProvider supports is.\n * @param {string} query.resource A resource name, e.g. 'posts', 'comments'\n * @param {Object} query.payload The payload object, e.g; { post_id: 12 }\n * @param {Object} options\n * @param {string} options.action Redux action type\n * @param {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * @param {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * @param {Function} options.onSuccess Side effect function to be executed upon success, e.g. () => refresh()\n * @param {Function} options.onFailure Side effect function to be executed upon failure, e.g. (error) => notify(error.message)\n * @param {boolean} options.withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @returns A tuple with the mutation callback and the request state. Destructure as [mutate, { data, total, error, loading, loaded }].\n *\n * The return value updates according to the request state:\n *\n * - mount:         [mutate, { loading: false, loaded: false }]\n * - mutate called: [mutate, { loading: true, loaded: false }]\n * - success:       [mutate, { data: [data from response], total: [total from response], loading: false, loaded: true }]\n * - error:         [mutate, { error: [error from response], loading: false, loaded: false }]\n *\n * The mutate function accepts the following arguments\n * - {Object} query\n * - {string} query.type The method called on the data provider, e.g. 'update'\n * - {string} query.resource A resource name, e.g. 'posts', 'comments'\n * - {Object} query.payload The payload object, e.g. { id: 123, data: { isApproved: true } }\n * - {Object} options\n * - {string} options.action Redux action type\n * - {boolean} options.undoable Set to true to run the mutation locally before calling the dataProvider\n * - {boolean} options.returnPromise Set to true to return the result promise of the mutation\n * - {Function} options.onSuccess Side effect function to be executed upon success or failure, e.g. { onSuccess: response => refresh() }\n * - {Function} options.onFailure Side effect function to be executed upon failure, e.g. { onFailure: error => notify(error.message) }\n * - {boolean} withDeclarativeSideEffectsSupport Set to true to support legacy side effects e.g. { onSuccess: { refresh: true } }\n *\n * @example\n *\n * // pass parameters at definition time\n * // use when all parameters are determined at definition time\n * // the mutation callback can be used as an even handler\n * // because Event parameters are ignored\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [approve, { loading }] = useMutation({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: { id: record.id, data: { isApproved: true } }\n *     });\n *     return <Button label=\"Approve\" onClick={approve} disabled={loading} />;\n * };\n *\n * @example\n *\n * // pass parameters at call time\n * // use when some parameters are only known at call time\n * import { useMutation } from 'react-admin';\n *\n * const ApproveButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const approve = event => mutate({\n *         type: 'update',\n *         resource: 'comments',\n *         payload: {\n *             id: event.target.dataset.id,\n *             data: { isApproved: true, updatedAt: new Date() }\n *         },\n *     });\n *     return <Button\n *         label=\"Approve\"\n *         onClick={approve}\n *         disabled={loading}\n *     />;\n * };\n *\n * @example\n *\n * // use the second argument to pass options\n * import { useMutation, useNotify, CRUD_UPDATE } from 'react-admin';\n *\n * const ResetStockButton = ({ record }) => {\n *     const [mutate, { loading }] = useMutation();\n *     const notify = useNotify();\n *     const handleClick = () => mutate(\n *         {\n *              type: 'update',\n *              resource: 'items',\n *              payload: { id: record.id, data: { stock: 0 } }\n *         },\n *         {\n *              undoable: true,\n *              action: CRUD_UPDATE,\n *              onSuccess: response => notify('Success !'),\n *              onFailure: error => notify('Failure !')\n *         }\n *     );\n *     return <Button label=\"Reset stock\" onClick={handleClick} disabled={loading} />;\n * };\n */\nvar useMutation = function (query, options) {\n    var _a = useSafeSetState({\n        data: null,\n        error: null,\n        total: null,\n        loading: false,\n        loaded: false,\n    }), state = _a[0], setState = _a[1];\n    var dataProvider = useDataProvider();\n    var dataProviderWithDeclarativeSideEffects = useDataProviderWithDeclarativeSideEffects();\n    /* eslint-disable react-hooks/exhaustive-deps */\n    var mutate = useCallback(function (callTimeQuery, callTimeOptions) {\n        var finalDataProvider = hasDeclarativeSideEffectsSupport(options, callTimeOptions)\n            ? dataProviderWithDeclarativeSideEffects\n            : dataProvider;\n        var params = mergeDefinitionAndCallTimeParameters(query, callTimeQuery, options, callTimeOptions);\n        setState(function (prevState) { return (__assign(__assign({}, prevState), { loading: true })); });\n        var returnPromise = params.options.returnPromise;\n        var promise = finalDataProvider[params.type]\n            .apply(finalDataProvider, typeof params.resource !== 'undefined'\n            ? [params.resource, params.payload, params.options]\n            : [params.payload, params.options])\n            .then(function (response) {\n            var data = response.data, total = response.total;\n            setState({\n                data: data,\n                error: null,\n                loaded: true,\n                loading: false,\n                total: total,\n            });\n            if (returnPromise) {\n                return response;\n            }\n        })\n            .catch(function (errorFromResponse) {\n            setState({\n                data: null,\n                error: errorFromResponse,\n                loaded: false,\n                loading: false,\n                total: null,\n            });\n            if (returnPromise) {\n                throw errorFromResponse;\n            }\n        });\n        if (returnPromise) {\n            return promise;\n        }\n    }, [\n        // deep equality, see https://github.com/facebook/react/issues/14476#issuecomment-471199055\n        JSON.stringify({ query: query, options: options }),\n        dataProvider,\n        dataProviderWithDeclarativeSideEffects,\n        setState,\n    ]\n    /* eslint-enable react-hooks/exhaustive-deps */\n    );\n    return [mutate, state];\n};\n/**\n * Utility function for merging parameters\n *\n * useMutation() parameters can be passed:\n * - at definition time (e.g. useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }) )\n * - at call time (e.g. [mutate] = useMutation(); mutate({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } }))\n * - both\n *\n * This function merges the definition time and call time parameters.\n *\n * This is useful because useMutation() is used by higher-level hooks like\n * useCreate() or useUpdate(), and these hooks can be called both ways.\n * So it makes sense to make useMutation() capable of handling both call types\n * as it avoids repetition higher in the hook chain.\n *\n * Also, the call time query may be a DOM Event if the callback is used\n * as an event listener, as in:\n *\n * const UpdateButton = () => {\n *     const mutate = useMutation({ type: 'update', resource: 'posts', payload: { id: 1, data: { title: '' } } });\n *     return <button onclick={mutate}>Click me</button>\n * };\n *\n * This usage is accepted, and therefore this function checks if the call time\n * query is an Event, and discards it in that case.\n *\n * @param query {Mutation}\n * @param callTimeQuery {Mutation}\n * @param options {Object}\n * @param callTimeOptions {Object}\n *\n * @return { type, resource, payload, options } The merged parameters\n */\nvar mergeDefinitionAndCallTimeParameters = function (query, callTimeQuery, options, callTimeOptions) {\n    if (!query && (!callTimeQuery || callTimeQuery instanceof Event)) {\n        throw new Error('Missing query either at definition or at call time');\n    }\n    var event = callTimeQuery;\n    if (callTimeQuery instanceof Event || !!(event === null || event === void 0 ? void 0 : event.preventDefault))\n        return {\n            type: query.type,\n            resource: query.resource,\n            payload: query.payload,\n            options: sanitizeOptions(options),\n        };\n    if (query) {\n        return {\n            type: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.type) || query.type,\n            resource: (callTimeQuery === null || callTimeQuery === void 0 ? void 0 : callTimeQuery.resource) || query.resource,\n            payload: callTimeQuery\n                ? merge({}, query.payload, callTimeQuery.payload)\n                : query.payload,\n            options: callTimeOptions\n                ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions))\n                : sanitizeOptions(options),\n        };\n    }\n    return {\n        type: callTimeQuery.type,\n        resource: callTimeQuery.resource,\n        payload: callTimeQuery.payload,\n        options: options\n            ? merge({}, sanitizeOptions(options), sanitizeOptions(callTimeOptions))\n            : sanitizeOptions(callTimeOptions),\n    };\n};\nvar hasDeclarativeSideEffectsSupport = function (options, callTimeOptions) {\n    if (!options && !callTimeOptions)\n        return false;\n    if (callTimeOptions && callTimeOptions.withDeclarativeSideEffectsSupport)\n        return true;\n    return options && options.withDeclarativeSideEffectsSupport;\n};\nvar sanitizeOptions = function (args) {\n    if (!args)\n        return { onSuccess: undefined };\n    var withDeclarativeSideEffectsSupport = args.withDeclarativeSideEffectsSupport, options = __rest(args, [\"withDeclarativeSideEffectsSupport\"]);\n    return __assign({ onSuccess: undefined }, options);\n};\nexport default useMutation;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,IAAIO,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUV,CAAV,EAAaW,CAAb,EAAgB;EAClD,IAAIZ,CAAC,GAAG,EAAR;;EACA,KAAK,IAAIM,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,KAA8CM,CAAC,CAACC,OAAF,CAAUP,CAAV,IAAe,CAAjE,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;;EACJ,IAAIL,CAAC,IAAI,IAAL,IAAa,OAAOH,MAAM,CAACgB,qBAAd,KAAwC,UAAzD,EACI,KAAK,IAAIZ,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAGR,MAAM,CAACgB,qBAAP,CAA6Bb,CAA7B,CAApB,EAAqDC,CAAC,GAAGI,CAAC,CAACD,MAA3D,EAAmEH,CAAC,EAApE,EAAwE;IACpE,IAAIU,CAAC,CAACC,OAAF,CAAUP,CAAC,CAACJ,CAAD,CAAX,IAAkB,CAAlB,IAAuBJ,MAAM,CAACS,SAAP,CAAiBQ,oBAAjB,CAAsCN,IAAtC,CAA2CR,CAA3C,EAA8CK,CAAC,CAACJ,CAAD,CAA/C,CAA3B,EACIF,CAAC,CAACM,CAAC,CAACJ,CAAD,CAAF,CAAD,GAAUD,CAAC,CAACK,CAAC,CAACJ,CAAD,CAAF,CAAX;EACP;EACL,OAAOF,CAAP;AACH,CAVD;;AAWA,SAASgB,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,yCAAP,MAAsD,6CAAtiBC,OAAjB,EAA0B;EACxC,IAAIC,EAAE,GAAGN,eAAe,CAAC;IACrBO,IAAI,EAAE,IADe;IAErBC,KAAK,EAAE,IAFc;IAGrBC,KAAK,EAAE,IAHc;IAIrBC,OAAO,EAAE,KAJY;IAKrBC,MAAM,EAAE;EALa,CAAD,CAAxB;EAAA,IAMIC,KAAK,GAAGN,EAAE,CAAC,CAAD,CANd;EAAA,IAMmBO,QAAQ,GAAGP,EAAE,CAAC,CAAD,CANhC;;EAOA,IAAIQ,YAAY,GAAGb,eAAe,EAAlC;EACA,IAAIc,sCAAsC,GAAGb,yCAAyC,EAAtF;EACA;;EACA,IAAIc,MAAM,GAAGlB,WAAW,CAAC,UAAUmB,aAAV,EAAyBC,eAAzB,EAA0C;IAC/D,IAAIC,iBAAiB,GAAGC,gCAAgC,CAACf,OAAD,EAAUa,eAAV,CAAhC,GAClBH,sCADkB,GAElBD,YAFN;IAGA,IAAIO,MAAM,GAAGC,oCAAoC,CAAClB,KAAD,EAAQa,aAAR,EAAuBZ,OAAvB,EAAgCa,eAAhC,CAAjD;IACAL,QAAQ,CAAC,UAAUU,SAAV,EAAqB;MAAE,OAAQ5C,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK4C,SAAL,CAAT,EAA0B;QAAEb,OAAO,EAAE;MAAX,CAA1B,CAAhB;IAAgE,CAAxF,CAAR;IACA,IAAIc,aAAa,GAAGH,MAAM,CAAChB,OAAP,CAAemB,aAAnC;IACA,IAAIC,OAAO,GAAGN,iBAAiB,CAACE,MAAM,CAACK,IAAR,CAAjB,CACTlC,KADS,CACH2B,iBADG,EACgB,OAAOE,MAAM,CAACM,QAAd,KAA2B,WAA3B,GACxB,CAACN,MAAM,CAACM,QAAR,EAAkBN,MAAM,CAACO,OAAzB,EAAkCP,MAAM,CAAChB,OAAzC,CADwB,GAExB,CAACgB,MAAM,CAACO,OAAR,EAAiBP,MAAM,CAAChB,OAAxB,CAHQ,EAITwB,IAJS,CAIJ,UAAUC,QAAV,EAAoB;MAC1B,IAAIvB,IAAI,GAAGuB,QAAQ,CAACvB,IAApB;MAAA,IAA0BE,KAAK,GAAGqB,QAAQ,CAACrB,KAA3C;MACAI,QAAQ,CAAC;QACLN,IAAI,EAAEA,IADD;QAELC,KAAK,EAAE,IAFF;QAGLG,MAAM,EAAE,IAHH;QAILD,OAAO,EAAE,KAJJ;QAKLD,KAAK,EAAEA;MALF,CAAD,CAAR;;MAOA,IAAIe,aAAJ,EAAmB;QACf,OAAOM,QAAP;MACH;IACJ,CAhBa,EAiBTC,KAjBS,CAiBH,UAAUC,iBAAV,EAA6B;MACpCnB,QAAQ,CAAC;QACLN,IAAI,EAAE,IADD;QAELC,KAAK,EAAEwB,iBAFF;QAGLrB,MAAM,EAAE,KAHH;QAILD,OAAO,EAAE,KAJJ;QAKLD,KAAK,EAAE;MALF,CAAD,CAAR;;MAOA,IAAIe,aAAJ,EAAmB;QACf,MAAMQ,iBAAN;MACH;IACJ,CA5Ba,CAAd;;IA6BA,IAAIR,aAAJ,EAAmB;MACf,OAAOC,OAAP;IACH;EACJ,CAvCuB,EAuCrB,CACC;EACAQ,IAAI,CAACC,SAAL,CAAe;IAAE9B,KAAK,EAAEA,KAAT;IAAgBC,OAAO,EAAEA;EAAzB,CAAf,CAFD,EAGCS,YAHD,EAICC,sCAJD,EAKCF,QALD;EAOH;EA9CwB,CAAxB;EAgDA,OAAO,CAACG,MAAD,EAASJ,KAAT,CAAP;AACH,CA5DD;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIU,oCAAoC,GAAG,UAAUlB,KAAV,EAAiBa,aAAjB,EAAgCZ,OAAhC,EAAyCa,eAAzC,EAA0D;EACjG,IAAI,CAACd,KAAD,KAAW,CAACa,aAAD,IAAkBA,aAAa,YAAYkB,KAAtD,CAAJ,EAAkE;IAC9D,MAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;EACH;;EACD,IAAIC,KAAK,GAAGpB,aAAZ;EACA,IAAIA,aAAa,YAAYkB,KAAzB,IAAkC,CAAC,EAAEE,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACC,cAAtD,CAAvC,EACI,OAAO;IACHZ,IAAI,EAAEtB,KAAK,CAACsB,IADT;IAEHC,QAAQ,EAAEvB,KAAK,CAACuB,QAFb;IAGHC,OAAO,EAAExB,KAAK,CAACwB,OAHZ;IAIHvB,OAAO,EAAEkC,eAAe,CAAClC,OAAD;EAJrB,CAAP;;EAMJ,IAAID,KAAJ,EAAW;IACP,OAAO;MACHsB,IAAI,EAAE,CAACT,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACS,IAA7E,KAAsFtB,KAAK,CAACsB,IAD/F;MAEHC,QAAQ,EAAE,CAACV,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACU,QAA7E,KAA0FvB,KAAK,CAACuB,QAFvG;MAGHC,OAAO,EAAEX,aAAa,GAChBlB,KAAK,CAAC,EAAD,EAAKK,KAAK,CAACwB,OAAX,EAAoBX,aAAa,CAACW,OAAlC,CADW,GAEhBxB,KAAK,CAACwB,OALT;MAMHvB,OAAO,EAAEa,eAAe,GAClBnB,KAAK,CAAC,EAAD,EAAKwC,eAAe,CAAClC,OAAD,CAApB,EAA+BkC,eAAe,CAACrB,eAAD,CAA9C,CADa,GAElBqB,eAAe,CAAClC,OAAD;IARlB,CAAP;EAUH;;EACD,OAAO;IACHqB,IAAI,EAAET,aAAa,CAACS,IADjB;IAEHC,QAAQ,EAAEV,aAAa,CAACU,QAFrB;IAGHC,OAAO,EAAEX,aAAa,CAACW,OAHpB;IAIHvB,OAAO,EAAEA,OAAO,GACVN,KAAK,CAAC,EAAD,EAAKwC,eAAe,CAAClC,OAAD,CAApB,EAA+BkC,eAAe,CAACrB,eAAD,CAA9C,CADK,GAEVqB,eAAe,CAACrB,eAAD;EANlB,CAAP;AAQH,CAhCD;;AAiCA,IAAIE,gCAAgC,GAAG,UAAUf,OAAV,EAAmBa,eAAnB,EAAoC;EACvE,IAAI,CAACb,OAAD,IAAY,CAACa,eAAjB,EACI,OAAO,KAAP;EACJ,IAAIA,eAAe,IAAIA,eAAe,CAACsB,iCAAvC,EACI,OAAO,IAAP;EACJ,OAAOnC,OAAO,IAAIA,OAAO,CAACmC,iCAA1B;AACH,CAND;;AAOA,IAAID,eAAe,GAAG,UAAUE,IAAV,EAAgB;EAClC,IAAI,CAACA,IAAL,EACI,OAAO;IAAEC,SAAS,EAAEC;EAAb,CAAP;;EACJ,IAAIH,iCAAiC,GAAGC,IAAI,CAACD,iCAA7C;EAAA,IAAgFnC,OAAO,GAAGZ,MAAM,CAACgD,IAAD,EAAO,CAAC,mCAAD,CAAP,CAAhG;;EACA,OAAO9D,QAAQ,CAAC;IAAE+D,SAAS,EAAEC;EAAb,CAAD,EAA2BtC,OAA3B,CAAf;AACH,CALD;;AAMA,eAAeF,WAAf"},"metadata":{},"sourceType":"module"}