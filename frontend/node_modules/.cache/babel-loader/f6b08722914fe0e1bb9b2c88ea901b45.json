{"ast":null,"code":"import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - loading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - loaded: the opposite of loading.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { loading, authenticated } = useAuthState();\n *     if (loading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\n\nvar useAuthState = function (params) {\n  if (params === void 0) {\n    params = emptyParams;\n  }\n\n  var _a = useSafeSetState({\n    loading: true,\n    loaded: false,\n    authenticated: true // optimistic\n\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var checkAuth = useCheckAuth();\n  useEffect(function () {\n    checkAuth(params, false).then(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: true\n      });\n    }).catch(function () {\n      return setState({\n        loading: false,\n        loaded: true,\n        authenticated: false\n      });\n    });\n  }, [checkAuth, params, setState]);\n  return state;\n};\n\nexport default useAuthState;","map":{"version":3,"names":["useEffect","useCheckAuth","useSafeSetState","emptyParams","useAuthState","params","_a","loading","loaded","authenticated","state","setState","checkAuth","then","catch"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/auth/useAuthState.js"],"sourcesContent":["import { useEffect } from 'react';\nimport useCheckAuth from './useCheckAuth';\nimport { useSafeSetState } from '../util/hooks';\nvar emptyParams = {};\n/**\n * Hook for getting the authentication status\n *\n * Calls the authProvider.checkAuth() method asynchronously.\n *\n * The return value updates according to the authProvider request state:\n *\n * - loading: true just after mount, while the authProvider is being called. false once the authProvider has answered.\n * - loaded: the opposite of loading.\n * - authenticated: true while loading. then true or false depending on the authProvider response.\n *\n * To avoid rendering a component and force waiting for the authProvider response, use the useAuthState() hook\n * instead of the useAuthenticated() hook.\n *\n * You can render different content depending on the authenticated status.\n *\n * @see useAuthenticated()\n *\n * @param {Object} params Any params you want to pass to the authProvider\n *\n * @returns The current auth check state. Destructure as { authenticated, error, loading, loaded }.\n *\n * @example\n * import { useAuthState, Loading } from 'react-admin';\n *\n * const MyPage = () => {\n *     const { loading, authenticated } = useAuthState();\n *     if (loading) {\n *         return <Loading />;\n *     }\n *     if (authenticated) {\n *        return <AuthenticatedContent />;\n *     }\n *     return <AnonymousContent />;\n * };\n */\nvar useAuthState = function (params) {\n    if (params === void 0) { params = emptyParams; }\n    var _a = useSafeSetState({\n        loading: true,\n        loaded: false,\n        authenticated: true, // optimistic\n    }), state = _a[0], setState = _a[1];\n    var checkAuth = useCheckAuth();\n    useEffect(function () {\n        checkAuth(params, false)\n            .then(function () {\n            return setState({ loading: false, loaded: true, authenticated: true });\n        })\n            .catch(function () {\n            return setState({ loading: false, loaded: true, authenticated: false });\n        });\n    }, [checkAuth, params, setState]);\n    return state;\n};\nexport default useAuthState;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,UAAUC,MAAV,EAAkB;EACjC,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;IAAEA,MAAM,GAAGF,WAAT;EAAuB;;EAChD,IAAIG,EAAE,GAAGJ,eAAe,CAAC;IACrBK,OAAO,EAAE,IADY;IAErBC,MAAM,EAAE,KAFa;IAGrBC,aAAa,EAAE,IAHM,CAGA;;EAHA,CAAD,CAAxB;EAAA,IAIIC,KAAK,GAAGJ,EAAE,CAAC,CAAD,CAJd;EAAA,IAImBK,QAAQ,GAAGL,EAAE,CAAC,CAAD,CAJhC;;EAKA,IAAIM,SAAS,GAAGX,YAAY,EAA5B;EACAD,SAAS,CAAC,YAAY;IAClBY,SAAS,CAACP,MAAD,EAAS,KAAT,CAAT,CACKQ,IADL,CACU,YAAY;MAClB,OAAOF,QAAQ,CAAC;QAAEJ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE,IAA1B;QAAgCC,aAAa,EAAE;MAA/C,CAAD,CAAf;IACH,CAHD,EAIKK,KAJL,CAIW,YAAY;MACnB,OAAOH,QAAQ,CAAC;QAAEJ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE,IAA1B;QAAgCC,aAAa,EAAE;MAA/C,CAAD,CAAf;IACH,CAND;EAOH,CARQ,EAQN,CAACG,SAAD,EAAYP,MAAZ,EAAoBM,QAApB,CARM,CAAT;EASA,OAAOD,KAAP;AACH,CAlBD;;AAmBA,eAAeN,YAAf"},"metadata":{},"sourceType":"module"}