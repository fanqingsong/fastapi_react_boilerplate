{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport { useFormContext } from './useFormContext';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\n\nexport var useFormGroup = function (name) {\n  var form = useForm();\n  var formContext = useFormContext();\n\n  var _a = useState({\n    dirty: false,\n    errors: undefined,\n    invalid: false,\n    pristine: true,\n    touched: false,\n    valid: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var unsubscribe = form.subscribe(function () {\n      var fields = formContext.getGroupFields(name);\n      var fieldStates = fields.map(function (field) {\n        return form.getFieldState(field);\n      }).filter(function (fieldState) {\n        return fieldState != undefined;\n      }); // eslint-disable-line\n\n      var newState = getFormGroupState(fieldStates);\n      setState(function (oldState) {\n        if (!isEqual(oldState, newState)) {\n          return newState;\n        }\n\n        return oldState;\n      });\n    }, {\n      errors: true,\n      invalid: true,\n      dirty: true,\n      pristine: true,\n      valid: true,\n      touched: true\n    });\n    return unsubscribe;\n  }, [form, formContext, name]);\n  return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from final-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\n\nexport var getFormGroupState = function (fieldStates) {\n  return fieldStates.reduce(function (acc, fieldState) {\n    var errors = acc.errors || {};\n\n    if (fieldState.error) {\n      errors[fieldState.name] = fieldState.error;\n    }\n\n    var newState = {\n      dirty: acc.dirty || fieldState.dirty,\n      errors: errors,\n      invalid: acc.invalid || fieldState.invalid,\n      pristine: acc.pristine && fieldState.pristine,\n      touched: acc.touched || fieldState.touched,\n      valid: acc.valid && fieldState.valid\n    };\n    return newState;\n  }, {\n    dirty: false,\n    errors: undefined,\n    invalid: false,\n    pristine: true,\n    valid: true,\n    touched: false\n  });\n};","map":{"version":3,"names":["useState","useEffect","useForm","isEqual","useFormContext","useFormGroup","name","form","formContext","_a","dirty","errors","undefined","invalid","pristine","touched","valid","state","setState","unsubscribe","subscribe","fields","getGroupFields","fieldStates","map","field","getFieldState","filter","fieldState","newState","getFormGroupState","oldState","reduce","acc","error"],"sources":["/app/node_modules/ra-core/esm/form/useFormGroup.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport { useFormContext } from './useFormContext';\n/**\n * Retrieve a specific form group data such as its validation status (valid/invalid) or\n * or whether its inputs have been updated (dirty/pristine)\n *\n * @example\n * import { Edit, SimpleForm, TextInput, FormGroupContextProvider, useFormGroup } from 'react-admin';\n * import { Accordion, AccordionDetails, AccordionSummary, Typography } from '@material-ui/core';\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *             <FormGroupContextProvider name=\"options\">\n *                 <Accordion>\n *                     <AccordionSummary\n *                         expandIcon={<ExpandMoreIcon />}\n *                         aria-controls=\"options-content\"\n *                         id=\"options-header\"\n *                     >\n *                         <AccordionSectionTitle name=\"options\">Options</AccordionSectionTitle>\n *                     </AccordionSummary>\n *                     <AccordionDetails id=\"options-content\" aria-labelledby=\"options-header\">\n *                         <TextInput source=\"teaser\" validate={minLength(20)} />\n *                     </AccordionDetails>\n *                 </Accordion>\n *             </FormGroupContextProvider>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * const AccordionSectionTitle = ({ children, name }) => {\n *     const formGroupState = useFormGroup(name);\n *     return (\n *         <Typography color={formGroupState.invalid && formGroupState.dirty ? 'error' : 'inherit'}>\n *             {children}\n *         </Typography>\n *     );\n * }\n *\n * @param {string} name The form group name\n * @returns {FormGroupState} The form group state\n */\nexport var useFormGroup = function (name) {\n    var form = useForm();\n    var formContext = useFormContext();\n    var _a = useState({\n        dirty: false,\n        errors: undefined,\n        invalid: false,\n        pristine: true,\n        touched: false,\n        valid: true,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var unsubscribe = form.subscribe(function () {\n            var fields = formContext.getGroupFields(name);\n            var fieldStates = fields\n                .map(function (field) {\n                return form.getFieldState(field);\n            })\n                .filter(function (fieldState) { return fieldState != undefined; }); // eslint-disable-line\n            var newState = getFormGroupState(fieldStates);\n            setState(function (oldState) {\n                if (!isEqual(oldState, newState)) {\n                    return newState;\n                }\n                return oldState;\n            });\n        }, {\n            errors: true,\n            invalid: true,\n            dirty: true,\n            pristine: true,\n            valid: true,\n            touched: true,\n        });\n        return unsubscribe;\n    }, [form, formContext, name]);\n    return state;\n};\n/**\n * Get the state of a form group\n *\n * @param {FieldState[]} fieldStates A map of field states from final-form where the key is the field name.\n * @returns {FormGroupState} The state of the group.\n */\nexport var getFormGroupState = function (fieldStates) {\n    return fieldStates.reduce(function (acc, fieldState) {\n        var errors = acc.errors || {};\n        if (fieldState.error) {\n            errors[fieldState.name] = fieldState.error;\n        }\n        var newState = {\n            dirty: acc.dirty || fieldState.dirty,\n            errors: errors,\n            invalid: acc.invalid || fieldState.invalid,\n            pristine: acc.pristine && fieldState.pristine,\n            touched: acc.touched || fieldState.touched,\n            valid: acc.valid && fieldState.valid,\n        };\n        return newState;\n    }, {\n        dirty: false,\n        errors: undefined,\n        invalid: false,\n        pristine: true,\n        valid: true,\n        touched: false,\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}