{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { cancel, delay, fork, put, takeEvery } from 'redux-saga/effects';\n/**\n * Distinct reducer on ids\n *\n * @example\n * addIds([1, 2, 3], { payload: { ids: [3, 4] } })\n *   => [1, 2, 3, 4]\n */\n\nvar addIds = function (oldIds, _a) {\n  var ids = _a.payload.ids; // Using a Set ensure we only keep distinct values\n\n  var oldIdsSet = new Set(oldIds);\n  ids.forEach(function (id) {\n    return oldIdsSet.add(id);\n  });\n  return Array.from(oldIdsSet);\n}; // We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\n\n\nexport var finalizeFactory = function (tasks, accumulations) {\n  /**\n   * Fetch the accumulated value after a delay\n   *\n   * As this gets canceled by subsequent calls to accumulate(), only the last\n   * call to finalize() will not be canceled. The delay acts as a\n   * debounce.\n   *\n   * @see https://redux-saga.js.org/docs/recipes/#debouncing\n   */\n  return function finalize(key, actionCreator) {\n    var accumulatedValue, action;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          // combined with cancel(), this debounces the calls\n          return [4\n          /*yield*/\n          , delay(50)];\n\n        case 1:\n          // combined with cancel(), this debounces the calls\n          _a.sent();\n\n          accumulatedValue = accumulations[key]; // Remove the latest accumulated value so that they do not interfere with later calls\n\n          delete accumulations[key];\n          action = actionCreator(key, accumulatedValue);\n          return [4\n          /*yield*/\n          , put(action)];\n\n        case 2:\n          _a.sent();\n\n          delete tasks[key];\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n}; // We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\n\nexport var accumulateFactory = function (tasks, accumulations, finalize) {\n  /**\n   * Accumulate actions and eventually redispatch an action with the accumulated payload\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [1, 2, 3], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [4, 5], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   *   => crudGetMany({ ids: [1, 2, 3, 4, 5], resource: 'posts' })\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   *   => crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {})\n   */\n  return function accumulate(action) {\n    var key, accumulateValues, _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          key = action.meta.accumulateKey || action.payload.resource;\n          if (!tasks[key]) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , cancel(tasks[key])];\n\n        case 1:\n          _c.sent();\n\n          _c.label = 2;\n\n        case 2:\n          accumulateValues = action.meta.accumulateValues || addIds; // accumulateValues is a reducer function, it receives the previous accumulatedValues for\n          // the provided key, and must return the updated accumulatedValues\n\n          accumulations[key] = accumulateValues(accumulations[key], action);\n          _a = tasks;\n          _b = key;\n          return [4\n          /*yield*/\n          , fork(finalize, key, action.meta.accumulate)];\n\n        case 3:\n          _a[_b] = _c.sent();\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n};\nexport default function () {\n  var accumulations, tasks;\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        accumulations = {};\n        tasks = {};\n        return [4\n        /*yield*/\n        , takeEvery(function (action) {\n          return action.meta && action.meta.accumulate;\n        }, accumulateFactory(tasks, accumulations, finalizeFactory(tasks, accumulations)))];\n\n      case 1:\n        _a.sent();\n\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}","map":{"version":3,"names":["__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","cancel","delay","fork","put","takeEvery","addIds","oldIds","_a","ids","payload","oldIdsSet","Set","forEach","id","add","Array","from","finalizeFactory","tasks","accumulations","finalize","key","actionCreator","accumulatedValue","action","accumulateFactory","accumulate","accumulateValues","_b","_c","meta","accumulateKey","resource"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/sideEffect/accumulate.js"],"sourcesContent":["var __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { cancel, delay, fork, put, takeEvery } from 'redux-saga/effects';\n/**\n * Distinct reducer on ids\n *\n * @example\n * addIds([1, 2, 3], { payload: { ids: [3, 4] } })\n *   => [1, 2, 3, 4]\n */\nvar addIds = function (oldIds, _a) {\n    var ids = _a.payload.ids;\n    // Using a Set ensure we only keep distinct values\n    var oldIdsSet = new Set(oldIds);\n    ids.forEach(function (id) { return oldIdsSet.add(id); });\n    return Array.from(oldIdsSet);\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var finalizeFactory = function (tasks, accumulations) {\n    /**\n     * Fetch the accumulated value after a delay\n     *\n     * As this gets canceled by subsequent calls to accumulate(), only the last\n     * call to finalize() will not be canceled. The delay acts as a\n     * debounce.\n     *\n     * @see https://redux-saga.js.org/docs/recipes/#debouncing\n     */\n    return function finalize(key, actionCreator) {\n        var accumulatedValue, action;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: \n                // combined with cancel(), this debounces the calls\n                return [4 /*yield*/, delay(50)];\n                case 1:\n                    // combined with cancel(), this debounces the calls\n                    _a.sent();\n                    accumulatedValue = accumulations[key];\n                    // Remove the latest accumulated value so that they do not interfere with later calls\n                    delete accumulations[key];\n                    action = actionCreator(key, accumulatedValue);\n                    return [4 /*yield*/, put(action)];\n                case 2:\n                    _a.sent();\n                    delete tasks[key];\n                    return [2 /*return*/];\n            }\n        });\n    };\n};\n// We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\nexport var accumulateFactory = function (tasks, accumulations, finalize) {\n    /**\n     * Accumulate actions and eventually redispatch an action with the accumulated payload\n     *\n     * @example\n     * accumulate({\n     *    type: CRUD_GET_MANY_ACCUMULATE,\n     *    payload: { ids: [1, 2, 3], resource: 'posts' },\n     *    meta: { accumulate: crudGetMany }\n     * });\n     * accumulate({\n     *    type: CRUD_GET_MANY_ACCUMULATE,\n     *    payload: { ids: [4, 5], resource: 'posts' },\n     *    meta: { accumulate: crudGetMany }\n     * });\n     *   => crudGetMany({ ids: [1, 2, 3, 4, 5], resource: 'posts' })\n     *\n     * @example\n     * accumulate({\n     *    type: CRUD_GET_MATCHING_ACCUMULATE,\n     *    meta: {\n     *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n     *      accumulateValues: () => true,\n     *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n     *    }\n     * });\n     * accumulate({\n     *    type: CRUD_GET_MATCHING_ACCUMULATE,\n     *    meta: {\n     *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n     *      accumulateValues: () => true,\n     *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n     *    }\n     * });\n     *   => crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {})\n     */\n    return function accumulate(action) {\n        var key, accumulateValues, _a, _b;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    key = action.meta.accumulateKey || action.payload.resource;\n                    if (!tasks[key]) return [3 /*break*/, 2];\n                    return [4 /*yield*/, cancel(tasks[key])];\n                case 1:\n                    _c.sent();\n                    _c.label = 2;\n                case 2:\n                    accumulateValues = action.meta.accumulateValues || addIds;\n                    // accumulateValues is a reducer function, it receives the previous accumulatedValues for\n                    // the provided key, and must return the updated accumulatedValues\n                    accumulations[key] = accumulateValues(accumulations[key], action);\n                    _a = tasks;\n                    _b = key;\n                    return [4 /*yield*/, fork(finalize, key, action.meta.accumulate)];\n                case 3:\n                    _a[_b] = _c.sent();\n                    return [2 /*return*/];\n            }\n        });\n    };\n};\nexport default function () {\n    var accumulations, tasks;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                accumulations = {};\n                tasks = {};\n                return [4 /*yield*/, takeEvery(function (action) { return action.meta && action.meta.accumulate; }, accumulateFactory(tasks, accumulations, finalizeFactory(tasks, accumulations)))];\n            case 1:\n                _a.sent();\n                return [2 /*return*/];\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}