{"ast":null,"code":"import * as React from 'react';\nimport inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString } from './assertions';\n\nvar DefaultComponent = function () {\n  return React.createElement(\"span\", null, \";\");\n};\n\nvar defaultType = {\n  type: DefaultComponent,\n  representation: function () {\n    return '<DefaultComponent />';\n  }\n};\nvar defaultTypes = {\n  array: defaultType,\n  boolean: defaultType,\n  date: defaultType,\n  email: defaultType,\n  id: defaultType,\n  number: defaultType,\n  reference: defaultType,\n  referenceArray: defaultType,\n  richText: defaultType,\n  string: defaultType,\n  url: defaultType\n};\n\nvar hasType = function (type, types) {\n  return typeof types[type] !== 'undefined';\n};\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\n\n\nvar inferElementFromValues = function (name, values, types) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (types === void 0) {\n    types = defaultTypes;\n  }\n\n  if (name === 'id' && hasType('id', types)) {\n    return new InferredElement(types.id, {\n      source: name\n    });\n  }\n\n  if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceChild));\n  }\n\n  if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 2));\n    return types.reference && new InferredElement(types.reference, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceChild));\n  }\n\n  if (name.substr(name.length - 4) === '_ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 4));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceArrayChild));\n  }\n\n  if (name.substr(name.length - 3) === 'Ids' && hasType('referenceArray', types)) {\n    var reference = inflection.pluralize(name.substr(0, name.length - 3));\n    return types.referenceArray && new InferredElement(types.referenceArray, {\n      source: name,\n      reference: reference\n    }, new InferredElement(types.referenceArrayChild));\n  }\n\n  if (values.length === 0) {\n    // FIXME introspect further using name\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0]) && hasType('array', types)) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return types.array && new InferredElement(types.array, {\n        source: name\n      }, Object.keys(leafValues_1).map(function (leafName) {\n        return inferElementFromValues(leafName, leafValues_1[leafName], types);\n      }));\n    } // FIXME introspect further\n\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if (valuesAreBoolean(values) && hasType('boolean', types)) {\n    return new InferredElement(types.boolean, {\n      source: name\n    });\n  }\n\n  if (valuesAreDate(values) && hasType('date', types)) {\n    return new InferredElement(types.date, {\n      source: name\n    });\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' && hasType('email', types)) {\n      return new InferredElement(types.email, {\n        source: name\n      });\n    }\n\n    if (name === 'url' && hasType('url', types)) {\n      return new InferredElement(types.url, {\n        source: name\n      });\n    }\n\n    if (valuesAreDateString(values) && hasType('date', types)) {\n      return new InferredElement(types.date, {\n        source: name\n      });\n    }\n\n    if (valuesAreHtml(values) && hasType('richText', types)) {\n      return new InferredElement(types.richText, {\n        source: name\n      });\n    }\n\n    return new InferredElement(types.string, {\n      source: name\n    });\n  }\n\n  if ((valuesAreInteger(values) || valuesAreNumeric(values)) && hasType('number', types)) {\n    return new InferredElement(types.number, {\n      source: name\n    });\n  }\n\n  if (valuesAreObject(values)) {\n    // we need to go deeper\n    // Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferElementFromValues(name + \".\" + propName_1, leafValues, types);\n  }\n\n  return new InferredElement(types.string, {\n    source: name\n  });\n};\n\nexport default inferElementFromValues;","map":{"version":3,"names":["React","inflection","getValuesFromRecords","InferredElement","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","DefaultComponent","createElement","defaultType","type","representation","defaultTypes","array","boolean","date","email","id","number","reference","referenceArray","richText","string","url","hasType","types","inferElementFromValues","name","values","source","substr","length","pluralize","referenceChild","referenceArrayChild","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues","v"],"sources":["/app/node_modules/ra-core/esm/inference/inferElementFromValues.js"],"sourcesContent":["import * as React from 'react';\nimport inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport InferredElement from './InferredElement';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, } from './assertions';\nvar DefaultComponent = function () { return React.createElement(\"span\", null, \";\"); };\nvar defaultType = {\n    type: DefaultComponent,\n    representation: function () { return '<DefaultComponent />'; },\n};\nvar defaultTypes = {\n    array: defaultType,\n    boolean: defaultType,\n    date: defaultType,\n    email: defaultType,\n    id: defaultType,\n    number: defaultType,\n    reference: defaultType,\n    referenceArray: defaultType,\n    richText: defaultType,\n    string: defaultType,\n    url: defaultType,\n};\nvar hasType = function (type, types) { return typeof types[type] !== 'undefined'; };\n/**\n * Guesses an element based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *         { number: NumberField, string: StringField }\n *     );\n *     // new InferredElement(<StringField source=\"address\" />)\n *\n * Types are optional: if a type isn't provided, the function falls back\n * to the nearest type.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField } // no richText type\n *     );\n *     // new InferredElement(<StringField source=\"content\" />)\n *\n * Types can be disabled by passing a falsy value.\n *\n * @example\n *     inferElementFromValues(\n *         'content',\n *         ['<h1>Hello</h1>'],\n *         { string: StringField, richText: false }\n *     );\n *     // null\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n * @param {Object} types A set of components indexed by type. The string type is the only required one\n *\n * @return InferredElement\n */\nvar inferElementFromValues = function (name, values, types) {\n    if (values === void 0) { values = []; }\n    if (types === void 0) { types = defaultTypes; }\n    if (name === 'id' && hasType('id', types)) {\n        return new InferredElement(types.id, { source: name });\n    }\n    if (name.substr(name.length - 3) === '_id' && hasType('reference', types)) {\n        var reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference: reference,\n            }, new InferredElement(types.referenceChild)));\n    }\n    if (name.substr(name.length - 2) === 'Id' && hasType('reference', types)) {\n        var reference = inflection.pluralize(name.substr(0, name.length - 2));\n        return (types.reference &&\n            new InferredElement(types.reference, {\n                source: name,\n                reference: reference,\n            }, new InferredElement(types.referenceChild)));\n    }\n    if (name.substr(name.length - 4) === '_ids' &&\n        hasType('referenceArray', types)) {\n        var reference = inflection.pluralize(name.substr(0, name.length - 4));\n        return (types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference: reference,\n            }, new InferredElement(types.referenceArrayChild)));\n    }\n    if (name.substr(name.length - 3) === 'Ids' &&\n        hasType('referenceArray', types)) {\n        var reference = inflection.pluralize(name.substr(0, name.length - 3));\n        return (types.referenceArray &&\n            new InferredElement(types.referenceArray, {\n                source: name,\n                reference: reference,\n            }, new InferredElement(types.referenceArrayChild)));\n    }\n    if (values.length === 0) {\n        // FIXME introspect further using name\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0]) && hasType('array', types)) {\n            var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) { return acc.concat(vals); }, []));\n            // FIXME bad visual representation\n            return (types.array &&\n                new InferredElement(types.array, {\n                    source: name,\n                }, Object.keys(leafValues_1).map(function (leafName) {\n                    return inferElementFromValues(leafName, leafValues_1[leafName], types);\n                })));\n        }\n        // FIXME introspect further\n        return new InferredElement(types.string, { source: name });\n    }\n    if (valuesAreBoolean(values) && hasType('boolean', types)) {\n        return new InferredElement(types.boolean, { source: name });\n    }\n    if (valuesAreDate(values) && hasType('date', types)) {\n        return new InferredElement(types.date, { source: name });\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' && hasType('email', types)) {\n            return new InferredElement(types.email, { source: name });\n        }\n        if (name === 'url' && hasType('url', types)) {\n            return new InferredElement(types.url, { source: name });\n        }\n        if (valuesAreDateString(values) && hasType('date', types)) {\n            return new InferredElement(types.date, { source: name });\n        }\n        if (valuesAreHtml(values) && hasType('richText', types)) {\n            return new InferredElement(types.richText, { source: name });\n        }\n        return new InferredElement(types.string, { source: name });\n    }\n    if ((valuesAreInteger(values) || valuesAreNumeric(values)) &&\n        hasType('number', types)) {\n        return new InferredElement(types.number, { source: name });\n    }\n    if (valuesAreObject(values)) {\n        // we need to go deeper\n        // Arbitrarily, choose the first prop of the first object\n        var propName_1 = Object.keys(values[0]).shift();\n        var leafValues = values.map(function (v) { return v[propName_1]; });\n        return inferElementFromValues(name + \".\" + propName_1, leafValues, types);\n    }\n    return new InferredElement(types.string, { source: name });\n};\nexport default inferElementFromValues;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}