{"ast":null,"code":"import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport ListContext from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\n * to pass all the necessary props (see the list below).\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g. [123, 456, ...]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  loaded boolean that is false until the data is available\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   basePath deduced from the location, useful for action buttons\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListControllerProps} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, ids, loaded } = useListContext();\n *     if (!loaded) {\n *         return <>Loading...</>;\n *     }\n *     const records = ids.map(id => data[id]);\n *     return (\n *         <ul>\n *             {records.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@material-ui/core';\n * import ChevronLeft from '@material-ui/icons/ChevronLeft';\n * import ChevronRight from '@material-ui/icons/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\n\nvar useListContext = function (props) {\n  var context = useContext(ListContext); // Props take precedence over the context\n  // @ts-ignore\n\n  return useMemo(function () {\n    return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n  }, [context, props]);\n};\n\nexport default useListContext;\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerProps} List controller props\n */\n\nvar extractListContextProps = function (_a) {\n  var basePath = _a.basePath,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      hasCreate = _a.hasCreate,\n      hideFilter = _a.hideFilter,\n      ids = _a.ids,\n      loaded = _a.loaded,\n      loading = _a.loading,\n      onSelect = _a.onSelect,\n      onToggleItem = _a.onToggleItem,\n      onUnselectItems = _a.onUnselectItems,\n      page = _a.page,\n      perPage = _a.perPage,\n      refetch = _a.refetch,\n      resource = _a.resource,\n      selectedIds = _a.selectedIds,\n      setFilters = _a.setFilters,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      showFilter = _a.showFilter,\n      total = _a.total;\n  return {\n    basePath: basePath,\n    currentSort: currentSort,\n    data: data,\n    defaultTitle: defaultTitle,\n    displayedFilters: displayedFilters,\n    filterValues: filterValues,\n    hasCreate: hasCreate,\n    hideFilter: hideFilter,\n    ids: ids,\n    loaded: loaded,\n    loading: loading,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: selectedIds,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    showFilter: showFilter,\n    total: total\n  };\n};","map":{"version":3,"names":["useContext","useMemo","defaults","ListContext","useListContext","props","context","extractListContextProps","_a","basePath","currentSort","data","defaultTitle","displayedFilters","filterValues","hasCreate","hideFilter","ids","loaded","loading","onSelect","onToggleItem","onUnselectItems","page","perPage","refetch","resource","selectedIds","setFilters","setPage","setPerPage","setSort","showFilter","total"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/controller/useListContext.js"],"sourcesContent":["import { useContext, useMemo } from 'react';\nimport defaults from 'lodash/defaults';\nimport ListContext from './ListContext';\n/**\n * Hook to read the list controller props from the ListContext.\n *\n * Mostly used within a <ListContext.Provider> (e.g. as a descendent of <List>\n * or <ListBase>).\n *\n * But you can also use it without a <ListContext.Provider>. In this case, it is up to you\n * to pass all the necessary props (see the list below).\n *\n * The given props will take precedence over context values.\n *\n * @typedef {Object} ListControllerProps\n * @prop {Object}   data an id-based dictionary of the list data, e.g. { 123: { id: 123, title: 'hello world' }, 456: { ... } }\n * @prop {Array}    ids an array listing the ids of the records in the list, e.g. [123, 456, ...]\n * @prop {integer}  total the total number of results for the current filters, excluding pagination. Useful to build the pagination controls. e.g. 23\n * @prop {boolean}  loaded boolean that is false until the data is available\n * @prop {boolean}  loading boolean that is true on mount, and false once the data was fetched\n * @prop {integer}  page the current page. Starts at 1\n * @prop {Function} setPage a callback to change the page, e.g. setPage(3)\n * @prop {integer}  perPage the number of results per page. Defaults to 25\n * @prop {Function} setPerPage a callback to change the number of results per page, e.g. setPerPage(25)\n * @prop {Object}   currentSort a sort object { field, order }, e.g. { field: 'date', order: 'DESC' }\n * @prop {Function} setSort a callback to change the sort, e.g. setSort('name', 'ASC')\n * @prop {Object}   filterValues a dictionary of filter values, e.g. { title: 'lorem', nationality: 'fr' }\n * @prop {Function} setFilters a callback to update the filters, e.g. setFilters(filters, displayedFilters)\n * @prop {Object}   displayedFilters a dictionary of the displayed filters, e.g. { title: true, nationality: true }\n * @prop {Function} showFilter a callback to show one of the filters, e.g. showFilter('title', defaultValue)\n * @prop {Function} hideFilter a callback to hide one of the filters, e.g. hideFilter('title')\n * @prop {Array}    selectedIds an array listing the ids of the selected rows, e.g. [123, 456]\n * @prop {Function} onSelect callback to change the list of selected rows, e.g. onSelect([456, 789])\n * @prop {Function} onToggleItem callback to toggle the selection of a given record based on its id, e.g. onToggleItem(456)\n * @prop {Function} onUnselectItems callback to clear the selection, e.g. onUnselectItems();\n * @prop {string}   basePath deduced from the location, useful for action buttons\n * @prop {string}   defaultTitle the translated title based on the resource, e.g. 'Posts'\n * @prop {string}   resource the resource name, deduced from the location. e.g. 'posts'\n *\n * @returns {ListControllerProps} list controller props\n *\n * @see useListController for how it is filled\n *\n * @example // custom list view\n *\n * import { useListContext } from 'react-admin';\n *\n * const MyList = () => {\n *     const { data, ids, loaded } = useListContext();\n *     if (!loaded) {\n *         return <>Loading...</>;\n *     }\n *     const records = ids.map(id => data[id]);\n *     return (\n *         <ul>\n *             {records.map(record => (\n *                 <li key={record.id}>{record.name}</li>\n *             ))}\n *         </ul>\n *     );\n * }\n *\n * @example // custom pagination\n *\n * import { useListContext } from 'react-admin';\n * import { Button, Toolbar } from '@material-ui/core';\n * import ChevronLeft from '@material-ui/icons/ChevronLeft';\n * import ChevronRight from '@material-ui/icons/ChevronRight';\n *\n * const PrevNextPagination = () => {\n *     const { page, perPage, total, setPage } = useListContext();\n *     const nbPages = Math.ceil(total / perPage) || 1;\n *     return (\n *         nbPages > 1 &&\n *             <Toolbar>\n *                 {page > 1 &&\n *                     <Button color=\"primary\" key=\"prev\" onClick={() => setPage(page - 1)}>\n *                         <ChevronLeft />\n *                         Prev\n *                     </Button>\n *                 }\n *                 {page !== nbPages &&\n *                     <Button color=\"primary\" key=\"next\" onClick={() => setPage(page + 1)}>\n *                         Next\n *                         <ChevronRight />\n *                     </Button>\n *                 }\n *             </Toolbar>\n *     );\n * }\n */\nvar useListContext = function (props) {\n    var context = useContext(ListContext);\n    // Props take precedence over the context\n    // @ts-ignore\n    return useMemo(function () {\n        return defaults({}, props != null ? extractListContextProps(props) : {}, context);\n    }, [context, props]);\n};\nexport default useListContext;\n/**\n * Extract only the list controller props\n *\n * @param {Object} props Props passed to the useListContext hook\n *\n * @returns {ListControllerProps} List controller props\n */\nvar extractListContextProps = function (_a) {\n    var basePath = _a.basePath, currentSort = _a.currentSort, data = _a.data, defaultTitle = _a.defaultTitle, displayedFilters = _a.displayedFilters, filterValues = _a.filterValues, hasCreate = _a.hasCreate, hideFilter = _a.hideFilter, ids = _a.ids, loaded = _a.loaded, loading = _a.loading, onSelect = _a.onSelect, onToggleItem = _a.onToggleItem, onUnselectItems = _a.onUnselectItems, page = _a.page, perPage = _a.perPage, refetch = _a.refetch, resource = _a.resource, selectedIds = _a.selectedIds, setFilters = _a.setFilters, setPage = _a.setPage, setPerPage = _a.setPerPage, setSort = _a.setSort, showFilter = _a.showFilter, total = _a.total;\n    return ({\n        basePath: basePath,\n        currentSort: currentSort,\n        data: data,\n        defaultTitle: defaultTitle,\n        displayedFilters: displayedFilters,\n        filterValues: filterValues,\n        hasCreate: hasCreate,\n        hideFilter: hideFilter,\n        ids: ids,\n        loaded: loaded,\n        loading: loading,\n        onSelect: onSelect,\n        onToggleItem: onToggleItem,\n        onUnselectItems: onUnselectItems,\n        page: page,\n        perPage: perPage,\n        refetch: refetch,\n        resource: resource,\n        selectedIds: selectedIds,\n        setFilters: setFilters,\n        setPage: setPage,\n        setPerPage: setPerPage,\n        setSort: setSort,\n        showFilter: showFilter,\n        total: total,\n    });\n};\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiB;EAClC,IAAIC,OAAO,GAAGN,UAAU,CAACG,WAAD,CAAxB,CADkC,CAElC;EACA;;EACA,OAAOF,OAAO,CAAC,YAAY;IACvB,OAAOC,QAAQ,CAAC,EAAD,EAAKG,KAAK,IAAI,IAAT,GAAgBE,uBAAuB,CAACF,KAAD,CAAvC,GAAiD,EAAtD,EAA0DC,OAA1D,CAAf;EACH,CAFa,EAEX,CAACA,OAAD,EAAUD,KAAV,CAFW,CAAd;AAGH,CAPD;;AAQA,eAAeD,cAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIG,uBAAuB,GAAG,UAAUC,EAAV,EAAc;EACxC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;EAAA,IAA4BC,WAAW,GAAGF,EAAE,CAACE,WAA7C;EAAA,IAA0DC,IAAI,GAAGH,EAAE,CAACG,IAApE;EAAA,IAA0EC,YAAY,GAAGJ,EAAE,CAACI,YAA5F;EAAA,IAA0GC,gBAAgB,GAAGL,EAAE,CAACK,gBAAhI;EAAA,IAAkJC,YAAY,GAAGN,EAAE,CAACM,YAApK;EAAA,IAAkLC,SAAS,GAAGP,EAAE,CAACO,SAAjM;EAAA,IAA4MC,UAAU,GAAGR,EAAE,CAACQ,UAA5N;EAAA,IAAwOC,GAAG,GAAGT,EAAE,CAACS,GAAjP;EAAA,IAAsPC,MAAM,GAAGV,EAAE,CAACU,MAAlQ;EAAA,IAA0QC,OAAO,GAAGX,EAAE,CAACW,OAAvR;EAAA,IAAgSC,QAAQ,GAAGZ,EAAE,CAACY,QAA9S;EAAA,IAAwTC,YAAY,GAAGb,EAAE,CAACa,YAA1U;EAAA,IAAwVC,eAAe,GAAGd,EAAE,CAACc,eAA7W;EAAA,IAA8XC,IAAI,GAAGf,EAAE,CAACe,IAAxY;EAAA,IAA8YC,OAAO,GAAGhB,EAAE,CAACgB,OAA3Z;EAAA,IAAoaC,OAAO,GAAGjB,EAAE,CAACiB,OAAjb;EAAA,IAA0bC,QAAQ,GAAGlB,EAAE,CAACkB,QAAxc;EAAA,IAAkdC,WAAW,GAAGnB,EAAE,CAACmB,WAAne;EAAA,IAAgfC,UAAU,GAAGpB,EAAE,CAACoB,UAAhgB;EAAA,IAA4gBC,OAAO,GAAGrB,EAAE,CAACqB,OAAzhB;EAAA,IAAkiBC,UAAU,GAAGtB,EAAE,CAACsB,UAAljB;EAAA,IAA8jBC,OAAO,GAAGvB,EAAE,CAACuB,OAA3kB;EAAA,IAAolBC,UAAU,GAAGxB,EAAE,CAACwB,UAApmB;EAAA,IAAgnBC,KAAK,GAAGzB,EAAE,CAACyB,KAA3nB;EACA,OAAQ;IACJxB,QAAQ,EAAEA,QADN;IAEJC,WAAW,EAAEA,WAFT;IAGJC,IAAI,EAAEA,IAHF;IAIJC,YAAY,EAAEA,YAJV;IAKJC,gBAAgB,EAAEA,gBALd;IAMJC,YAAY,EAAEA,YANV;IAOJC,SAAS,EAAEA,SAPP;IAQJC,UAAU,EAAEA,UARR;IASJC,GAAG,EAAEA,GATD;IAUJC,MAAM,EAAEA,MAVJ;IAWJC,OAAO,EAAEA,OAXL;IAYJC,QAAQ,EAAEA,QAZN;IAaJC,YAAY,EAAEA,YAbV;IAcJC,eAAe,EAAEA,eAdb;IAeJC,IAAI,EAAEA,IAfF;IAgBJC,OAAO,EAAEA,OAhBL;IAiBJC,OAAO,EAAEA,OAjBL;IAkBJC,QAAQ,EAAEA,QAlBN;IAmBJC,WAAW,EAAEA,WAnBT;IAoBJC,UAAU,EAAEA,UApBR;IAqBJC,OAAO,EAAEA,OArBL;IAsBJC,UAAU,EAAEA,UAtBR;IAuBJC,OAAO,EAAEA,OAvBL;IAwBJC,UAAU,EAAEA,UAxBR;IAyBJC,KAAK,EAAEA;EAzBH,CAAR;AA2BH,CA7BD"},"metadata":{},"sourceType":"module"}