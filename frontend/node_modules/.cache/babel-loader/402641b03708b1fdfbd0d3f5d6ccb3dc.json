{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport isEqual from 'lodash/isEqual';\nimport { FETCH_END } from '../../../actions';\nimport { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from '../../../core';\nimport getFetchedAt from '../../../util/getFetchedAt';\n/**\n * Make the fetchedAt property non enumerable\n */\n\nexport var hideFetchedAt = function (records) {\n  Object.defineProperty(records, 'fetchedAt', {\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  return records;\n};\n/**\n * Add new records to the pool, and remove outdated ones.\n *\n * This is the equivalent of a stale-while-revalidate caching strategy:\n * The cached data is displayed before fetching, and stale data is removed\n * only once fresh data is fetched.\n */\n\nexport var addRecordsAndRemoveOutdated = function (newRecords, oldRecords) {\n  if (newRecords === void 0) {\n    newRecords = [];\n  }\n\n  var newRecordsById = {};\n  newRecords.forEach(function (record) {\n    return newRecordsById[record.id] = record;\n  });\n  var newFetchedAt = getFetchedAt(newRecords.map(function (_a) {\n    var id = _a.id;\n    return id;\n  }), oldRecords.fetchedAt);\n  var records = {\n    fetchedAt: newFetchedAt\n  };\n  Object.keys(newFetchedAt).forEach(function (id) {\n    return records[id] = newRecordsById[id] ? isEqual(newRecordsById[id], oldRecords[id]) ? oldRecords[id] // do not change the record to avoid a redraw\n    : newRecordsById[id] : oldRecords[id];\n  });\n  return hideFetchedAt(records);\n};\n/**\n * Add new records to the pool, without touching the other ones.\n */\n\nexport var addRecords = function (newRecords, oldRecords) {\n  if (newRecords === void 0) {\n    newRecords = [];\n  }\n\n  var newRecordsById = __assign({}, oldRecords);\n\n  newRecords.forEach(function (record) {\n    newRecordsById[record.id] = isEqual(record, oldRecords[record.id]) ? oldRecords[record.id] : record;\n  });\n  var updatedFetchedAt = getFetchedAt(newRecords.map(function (_a) {\n    var id = _a.id;\n    return id;\n  }), oldRecords.fetchedAt);\n  Object.defineProperty(newRecordsById, 'fetchedAt', {\n    value: __assign(__assign({}, oldRecords.fetchedAt), updatedFetchedAt),\n    enumerable: false\n  });\n  return newRecordsById;\n};\nexport var addOneRecord = function (newRecord, oldRecords, date) {\n  var _a, _b;\n\n  if (date === void 0) {\n    date = new Date();\n  }\n\n  var newRecordsById = __assign(__assign({}, oldRecords), (_a = {}, _a[newRecord.id] = isEqual(newRecord, oldRecords[newRecord.id]) ? oldRecords[newRecord.id] // do not change the record to avoid a redraw\n  : newRecord, _a));\n\n  return Object.defineProperty(newRecordsById, 'fetchedAt', {\n    value: __assign(__assign({}, oldRecords.fetchedAt), (_b = {}, _b[newRecord.id] = date, _b)),\n    enumerable: false\n  });\n};\n\nvar includesNotStrict = function (items, element) {\n  return items.some(function (item) {\n    return item == element;\n  });\n}; // eslint-disable-line eqeqeq\n\n/**\n * Remove records from the pool\n */\n\n\nexport var removeRecords = function (removedRecordIds, oldRecords) {\n  if (removedRecordIds === void 0) {\n    removedRecordIds = [];\n  }\n\n  var records = Object.entries(oldRecords).filter(function (_a) {\n    var key = _a[0];\n    return !includesNotStrict(removedRecordIds, key);\n  }).reduce(function (obj, _a) {\n    var _b;\n\n    var key = _a[0],\n        val = _a[1];\n    return __assign(__assign({}, obj), (_b = {}, _b[key] = val, _b));\n  }, {\n    fetchedAt: {} // TypeScript warns later if this is not defined\n\n  });\n  records.fetchedAt = Object.entries(oldRecords.fetchedAt).filter(function (_a) {\n    var key = _a[0];\n    return !includesNotStrict(removedRecordIds, key);\n  }).reduce(function (obj, _a) {\n    var _b;\n\n    var key = _a[0],\n        val = _a[1];\n    return __assign(__assign({}, obj), (_b = {}, _b[key] = val, _b));\n  }, {});\n  return hideFetchedAt(records);\n};\nvar initialState = hideFetchedAt({\n  fetchedAt: {}\n});\n\nvar dataReducer = function (previousState, _a) {\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  var payload = _a.payload,\n      meta = _a.meta;\n\n  if (meta && meta.optimistic) {\n    if (meta.fetch === UPDATE) {\n      var updatedRecord = __assign(__assign({}, previousState[payload.id]), payload.data);\n\n      return addOneRecord(updatedRecord, previousState);\n    }\n\n    if (meta.fetch === UPDATE_MANY) {\n      var updatedRecords = payload.ids.map(function (id) {\n        return __assign(__assign({}, previousState[id]), payload.data);\n      });\n      return addRecordsAndRemoveOutdated(updatedRecords, previousState);\n    }\n\n    if (meta.fetch === DELETE) {\n      return removeRecords([payload.id], previousState);\n    }\n\n    if (meta.fetch === DELETE_MANY) {\n      return removeRecords(payload.ids, previousState);\n    }\n  }\n\n  if (!meta || !meta.fetchResponse || meta.fetchStatus !== FETCH_END) {\n    return previousState;\n  }\n\n  switch (meta.fetchResponse) {\n    case GET_LIST:\n      return addRecordsAndRemoveOutdated(payload.data, previousState);\n\n    case GET_MANY:\n    case GET_MANY_REFERENCE:\n      return addRecords(payload.data, previousState);\n\n    case UPDATE:\n    case CREATE:\n    case GET_ONE:\n      return addOneRecord(payload.data, previousState);\n\n    default:\n      return previousState;\n  }\n};\n\nexport var getRecord = function (state, id) {\n  return state[id];\n};\nexport default dataReducer;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","isEqual","FETCH_END","CREATE","DELETE","DELETE_MANY","GET_LIST","GET_MANY","GET_MANY_REFERENCE","GET_ONE","UPDATE","UPDATE_MANY","getFetchedAt","hideFetchedAt","records","defineProperty","enumerable","configurable","writable","addRecordsAndRemoveOutdated","newRecords","oldRecords","newRecordsById","forEach","record","id","newFetchedAt","map","_a","fetchedAt","keys","addRecords","updatedFetchedAt","value","addOneRecord","newRecord","date","_b","Date","includesNotStrict","items","element","some","item","removeRecords","removedRecordIds","entries","filter","key","reduce","obj","val","initialState","dataReducer","previousState","payload","meta","optimistic","fetch","updatedRecord","data","updatedRecords","ids","fetchResponse","fetchStatus","getRecord","state"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/reducer/admin/resource/data.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport isEqual from 'lodash/isEqual';\nimport { FETCH_END } from '../../../actions';\nimport { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY, } from '../../../core';\nimport getFetchedAt from '../../../util/getFetchedAt';\n/**\n * Make the fetchedAt property non enumerable\n */\nexport var hideFetchedAt = function (records) {\n    Object.defineProperty(records, 'fetchedAt', {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n    });\n    return records;\n};\n/**\n * Add new records to the pool, and remove outdated ones.\n *\n * This is the equivalent of a stale-while-revalidate caching strategy:\n * The cached data is displayed before fetching, and stale data is removed\n * only once fresh data is fetched.\n */\nexport var addRecordsAndRemoveOutdated = function (newRecords, oldRecords) {\n    if (newRecords === void 0) { newRecords = []; }\n    var newRecordsById = {};\n    newRecords.forEach(function (record) { return (newRecordsById[record.id] = record); });\n    var newFetchedAt = getFetchedAt(newRecords.map(function (_a) {\n        var id = _a.id;\n        return id;\n    }), oldRecords.fetchedAt);\n    var records = { fetchedAt: newFetchedAt };\n    Object.keys(newFetchedAt).forEach(function (id) {\n        return (records[id] = newRecordsById[id]\n            ? isEqual(newRecordsById[id], oldRecords[id])\n                ? oldRecords[id] // do not change the record to avoid a redraw\n                : newRecordsById[id]\n            : oldRecords[id]);\n    });\n    return hideFetchedAt(records);\n};\n/**\n * Add new records to the pool, without touching the other ones.\n */\nexport var addRecords = function (newRecords, oldRecords) {\n    if (newRecords === void 0) { newRecords = []; }\n    var newRecordsById = __assign({}, oldRecords);\n    newRecords.forEach(function (record) {\n        newRecordsById[record.id] = isEqual(record, oldRecords[record.id])\n            ? oldRecords[record.id]\n            : record;\n    });\n    var updatedFetchedAt = getFetchedAt(newRecords.map(function (_a) {\n        var id = _a.id;\n        return id;\n    }), oldRecords.fetchedAt);\n    Object.defineProperty(newRecordsById, 'fetchedAt', {\n        value: __assign(__assign({}, oldRecords.fetchedAt), updatedFetchedAt),\n        enumerable: false,\n    });\n    return newRecordsById;\n};\nexport var addOneRecord = function (newRecord, oldRecords, date) {\n    var _a, _b;\n    if (date === void 0) { date = new Date(); }\n    var newRecordsById = __assign(__assign({}, oldRecords), (_a = {}, _a[newRecord.id] = isEqual(newRecord, oldRecords[newRecord.id])\n        ? oldRecords[newRecord.id] // do not change the record to avoid a redraw\n        : newRecord, _a));\n    return Object.defineProperty(newRecordsById, 'fetchedAt', {\n        value: __assign(__assign({}, oldRecords.fetchedAt), (_b = {}, _b[newRecord.id] = date, _b)),\n        enumerable: false,\n    });\n};\nvar includesNotStrict = function (items, element) {\n    return items.some(function (item) { return item == element; });\n}; // eslint-disable-line eqeqeq\n/**\n * Remove records from the pool\n */\nexport var removeRecords = function (removedRecordIds, oldRecords) {\n    if (removedRecordIds === void 0) { removedRecordIds = []; }\n    var records = Object.entries(oldRecords)\n        .filter(function (_a) {\n        var key = _a[0];\n        return !includesNotStrict(removedRecordIds, key);\n    })\n        .reduce(function (obj, _a) {\n        var _b;\n        var key = _a[0], val = _a[1];\n        return (__assign(__assign({}, obj), (_b = {}, _b[key] = val, _b)));\n    }, {\n        fetchedAt: {}, // TypeScript warns later if this is not defined\n    });\n    records.fetchedAt = Object.entries(oldRecords.fetchedAt)\n        .filter(function (_a) {\n        var key = _a[0];\n        return !includesNotStrict(removedRecordIds, key);\n    })\n        .reduce(function (obj, _a) {\n        var _b;\n        var key = _a[0], val = _a[1];\n        return (__assign(__assign({}, obj), (_b = {}, _b[key] = val, _b)));\n    }, {});\n    return hideFetchedAt(records);\n};\nvar initialState = hideFetchedAt({ fetchedAt: {} });\nvar dataReducer = function (previousState, _a) {\n    if (previousState === void 0) { previousState = initialState; }\n    var payload = _a.payload, meta = _a.meta;\n    if (meta && meta.optimistic) {\n        if (meta.fetch === UPDATE) {\n            var updatedRecord = __assign(__assign({}, previousState[payload.id]), payload.data);\n            return addOneRecord(updatedRecord, previousState);\n        }\n        if (meta.fetch === UPDATE_MANY) {\n            var updatedRecords = payload.ids.map(function (id) { return (__assign(__assign({}, previousState[id]), payload.data)); });\n            return addRecordsAndRemoveOutdated(updatedRecords, previousState);\n        }\n        if (meta.fetch === DELETE) {\n            return removeRecords([payload.id], previousState);\n        }\n        if (meta.fetch === DELETE_MANY) {\n            return removeRecords(payload.ids, previousState);\n        }\n    }\n    if (!meta || !meta.fetchResponse || meta.fetchStatus !== FETCH_END) {\n        return previousState;\n    }\n    switch (meta.fetchResponse) {\n        case GET_LIST:\n            return addRecordsAndRemoveOutdated(payload.data, previousState);\n        case GET_MANY:\n        case GET_MANY_REFERENCE:\n            return addRecords(payload.data, previousState);\n        case UPDATE:\n        case CREATE:\n        case GET_ONE:\n            return addOneRecord(payload.data, previousState);\n        default:\n            return previousState;\n    }\n};\nexport var getRecord = function (state, id) { return state[id]; };\nexport default dataReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}