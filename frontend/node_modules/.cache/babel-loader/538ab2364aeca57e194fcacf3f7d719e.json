{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { LinearProgress } from '../layout';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\n\nvar ReferenceArrayField = function (props) {\n  var basePath = props.basePath,\n      children = props.children,\n      filter = props.filter,\n      _a = props.page,\n      page = _a === void 0 ? 1 : _a,\n      perPage = props.perPage,\n      reference = props.reference,\n      resource = props.resource,\n      sort = props.sort,\n      source = props.source;\n  var record = useRecordContext(props);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  var isReferenceDeclared = useSelector(function (state) {\n    return typeof state.admin.resources[props.reference] !== 'undefined';\n  });\n\n  if (!isReferenceDeclared) {\n    throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceArrayField reference=\\\"\" + props.reference + \"\\\">\");\n  }\n\n  var controllerProps = useReferenceArrayFieldController({\n    basePath: basePath,\n    filter: filter,\n    page: page,\n    perPage: perPage,\n    record: record,\n    reference: reference,\n    resource: resource,\n    sort: sort,\n    source: source\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(PureReferenceArrayFieldView, __assign({}, props, controllerProps))));\n};\n\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired\n});\nReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    progress: {\n      marginTop: theme.spacing(2)\n    }\n  };\n}, {\n  name: 'RaReferenceArrayField'\n});\nexport var ReferenceArrayFieldView = function (props) {\n  var children = props.children,\n      pagination = props.pagination,\n      className = props.className,\n      resource = props.resource,\n      reference = props.reference,\n      rest = __rest(props, [\"children\", \"pagination\", \"className\", \"resource\", \"reference\"]);\n\n  var classes = useStyles(props);\n  var loaded = useListContext(props).loaded;\n\n  if (!loaded) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return React.createElement(React.Fragment, null, cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), {\n    className: className,\n    resource: resource\n  })), ' ', pagination && props.total !== undefined && cloneElement(pagination, sanitizeFieldRestProps(rest)));\n};\nReferenceArrayFieldView.propTypes = {\n  basePath: PropTypes.string,\n  classes: PropTypes.any,\n  className: PropTypes.string,\n  data: PropTypes.any,\n  ids: PropTypes.array,\n  loaded: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","Children","cloneElement","memo","PropTypes","makeStyles","useSelector","ListContextProvider","useListContext","useReferenceArrayFieldController","ResourceContextProvider","useRecordContext","fieldPropTypes","sanitizeFieldRestProps","LinearProgress","ReferenceArrayField","props","basePath","children","filter","_a","page","perPage","reference","resource","sort","source","record","count","Error","isReferenceDeclared","state","admin","resources","controllerProps","createElement","value","PureReferenceArrayFieldView","propTypes","addLabel","bool","string","classes","object","className","element","isRequired","label","any","sortBy","sortByOrder","defaultProps","useStyles","theme","progress","marginTop","spacing","name","ReferenceArrayFieldView","pagination","rest","loaded","Fragment","only","total","undefined","data","ids","array"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-ui-materialui/esm/field/ReferenceArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { ListContextProvider, useListContext, useReferenceArrayFieldController, ResourceContextProvider, useRecordContext, } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport sanitizeFieldRestProps from './sanitizeFieldRestProps';\nimport { LinearProgress } from '../layout';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n * By default, restricts the displayed values to 1000. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayField perPage={10} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * By default, the field displays the results in the order in which they are referenced\n * (i.e. in the order of the list of ids). You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayField sort={{ field: 'name', order: 'ASC' }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n *\n * Also, you can filter the results to display only a subset of values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayField filter={{ is_published: true }} reference=\"categories\" source=\"category_ids\">\n *    ...\n * </ReferenceArrayField>\n */\nvar ReferenceArrayField = function (props) {\n    var basePath = props.basePath, children = props.children, filter = props.filter, _a = props.page, page = _a === void 0 ? 1 : _a, perPage = props.perPage, reference = props.reference, resource = props.resource, sort = props.sort, source = props.source;\n    var record = useRecordContext(props);\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n    }\n    var isReferenceDeclared = useSelector(function (state) { return typeof state.admin.resources[props.reference] !== 'undefined'; });\n    if (!isReferenceDeclared) {\n        throw new Error(\"You must declare a <Resource name=\\\"\" + props.reference + \"\\\"> in order to use a <ReferenceArrayField reference=\\\"\" + props.reference + \"\\\">\");\n    }\n    var controllerProps = useReferenceArrayFieldController({\n        basePath: basePath,\n        filter: filter,\n        page: page,\n        perPage: perPage,\n        record: record,\n        reference: reference,\n        resource: resource,\n        sort: sort,\n        source: source,\n    });\n    return (React.createElement(ResourceContextProvider, { value: reference },\n        React.createElement(ListContextProvider, { value: controllerProps },\n            React.createElement(PureReferenceArrayFieldView, __assign({}, props, controllerProps)))));\n};\nReferenceArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { addLabel: PropTypes.bool, basePath: PropTypes.string, classes: PropTypes.object, className: PropTypes.string, children: PropTypes.element.isRequired, label: PropTypes.string, record: PropTypes.any, reference: PropTypes.string.isRequired, resource: PropTypes.string, sortBy: PropTypes.string, sortByOrder: fieldPropTypes.sortByOrder, source: PropTypes.string.isRequired });\nReferenceArrayField.defaultProps = {\n    addLabel: true,\n};\nvar useStyles = makeStyles(function (theme) { return ({\n    progress: { marginTop: theme.spacing(2) },\n}); }, { name: 'RaReferenceArrayField' });\nexport var ReferenceArrayFieldView = function (props) {\n    var children = props.children, pagination = props.pagination, className = props.className, resource = props.resource, reference = props.reference, rest = __rest(props, [\"children\", \"pagination\", \"className\", \"resource\", \"reference\"]);\n    var classes = useStyles(props);\n    var loaded = useListContext(props).loaded;\n    if (!loaded) {\n        return React.createElement(LinearProgress, { className: classes.progress });\n    }\n    return (React.createElement(React.Fragment, null,\n        cloneElement(Children.only(children), __assign(__assign({}, sanitizeFieldRestProps(rest)), { className: className, resource: resource })),\n        ' ',\n        pagination &&\n            props.total !== undefined &&\n            cloneElement(pagination, sanitizeFieldRestProps(rest))));\n};\nReferenceArrayFieldView.propTypes = {\n    basePath: PropTypes.string,\n    classes: PropTypes.any,\n    className: PropTypes.string,\n    data: PropTypes.any,\n    ids: PropTypes.array,\n    loaded: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n    reference: PropTypes.string.isRequired,\n};\nvar PureReferenceArrayFieldView = memo(ReferenceArrayFieldView);\nexport default ReferenceArrayField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}