{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result\n * of the call (the list of updated record ids), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { loading: false, loaded: false }]\n * - start:   [updateMany, { loading: true, loaded: false }]\n * - success: [updateMany, { data: [data from response], loading: false, loaded: true }]\n * - error:   [updateMany, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param ids The resource identifiers, e.g. [123, 456]\n * @param data The updates to merge into all records, e.g. { views: 10 }\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [updateMany, { data, error, loading, loaded }].\n *\n * The updateMany() function can be called in 3 different ways:\n *  - with the same parameters as the useUpdateMany() hook: update(resource, ids, data, options)\n *  - with the same syntax as useMutation: update({ resource, payload: { ids, data } }, options)\n *  - with no parameter (if they were already passed to useUpdateMany()): updateMany()\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany } from 'react-admin';\n *\n * const BulkResetViewsButton = ({ selectedIds }) => {\n *     const [updateMany, { loading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', selectedIds, { views: 0 });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany } from 'react-admin';\n *\n * const BulkResetViewsButton = ({ selectedIds }) => {\n *     const [updateMany, { loading, error }] = useUpdateMany('posts', selectedIds, { views: 0 });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={updateMany}>Reset views</button>;\n * };\n */\n\nvar useUpdateMany = function (resource, ids, data, options) {\n  var _a = useMutation({\n    type: 'updateMany',\n    resource: resource,\n    payload: {\n      ids: ids,\n      data: data\n    }\n  }, options),\n      mutate = _a[0],\n      state = _a[1];\n\n  var updateMany = useCallback(function (resource, ids, data, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'updateMany',\n        resource: resource,\n        payload: {\n          ids: ids,\n          data: data\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, ids);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return [updateMany, state];\n};\n\nexport default useUpdateMany;","map":{"version":3,"names":["useCallback","useMutation","useUpdateMany","resource","ids","data","options","_a","type","payload","mutate","state","updateMany","query"],"sources":["/app/node_modules/ra-core/esm/dataProvider/useUpdateMany.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.updateMany() method, the result\n * of the call (the list of updated record ids), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [updateMany, { loading: false, loaded: false }]\n * - start:   [updateMany, { loading: true, loaded: false }]\n * - success: [updateMany, { data: [data from response], loading: false, loaded: true }]\n * - error:   [updateMany, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param ids The resource identifiers, e.g. [123, 456]\n * @param data The updates to merge into all records, e.g. { views: 10 }\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [updateMany, { data, error, loading, loaded }].\n *\n * The updateMany() function can be called in 3 different ways:\n *  - with the same parameters as the useUpdateMany() hook: update(resource, ids, data, options)\n *  - with the same syntax as useMutation: update({ resource, payload: { ids, data } }, options)\n *  - with no parameter (if they were already passed to useUpdateMany()): updateMany()\n *\n * @example // set params when calling the updateMany callback\n *\n * import { useUpdateMany } from 'react-admin';\n *\n * const BulkResetViewsButton = ({ selectedIds }) => {\n *     const [updateMany, { loading, error }] = useUpdateMany();\n *     const handleClick = () => {\n *         updateMany('posts', selectedIds, { views: 0 });\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={handleClick}>Reset views</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useUpdateMany } from 'react-admin';\n *\n * const BulkResetViewsButton = ({ selectedIds }) => {\n *     const [updateMany, { loading, error }] = useUpdateMany('posts', selectedIds, { views: 0 });\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={updateMany}>Reset views</button>;\n * };\n */\nvar useUpdateMany = function (resource, ids, data, options) {\n    var _a = useMutation({ type: 'updateMany', resource: resource, payload: { ids: ids, data: data } }, options), mutate = _a[0], state = _a[1];\n    var updateMany = useCallback(function (resource, ids, data, options) {\n        if (typeof resource === 'string') {\n            var query = {\n                type: 'updateMany',\n                resource: resource,\n                payload: {\n                    ids: ids,\n                    data: data,\n                },\n            };\n            return mutate(query, options);\n        }\n        else {\n            return mutate(resource, ids);\n        }\n    }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return [updateMany, state];\n};\nexport default useUpdateMany;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;EACxD,IAAIC,EAAE,GAAGN,WAAW,CAAC;IAAEO,IAAI,EAAE,YAAR;IAAsBL,QAAQ,EAAEA,QAAhC;IAA0CM,OAAO,EAAE;MAAEL,GAAG,EAAEA,GAAP;MAAYC,IAAI,EAAEA;IAAlB;EAAnD,CAAD,EAAgFC,OAAhF,CAApB;EAAA,IAA8GI,MAAM,GAAGH,EAAE,CAAC,CAAD,CAAzH;EAAA,IAA8HI,KAAK,GAAGJ,EAAE,CAAC,CAAD,CAAxI;;EACA,IAAIK,UAAU,GAAGZ,WAAW,CAAC,UAAUG,QAAV,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;IACjE,IAAI,OAAOH,QAAP,KAAoB,QAAxB,EAAkC;MAC9B,IAAIU,KAAK,GAAG;QACRL,IAAI,EAAE,YADE;QAERL,QAAQ,EAAEA,QAFF;QAGRM,OAAO,EAAE;UACLL,GAAG,EAAEA,GADA;UAELC,IAAI,EAAEA;QAFD;MAHD,CAAZ;MAQA,OAAOK,MAAM,CAACG,KAAD,EAAQP,OAAR,CAAb;IACH,CAVD,MAWK;MACD,OAAOI,MAAM,CAACP,QAAD,EAAWC,GAAX,CAAb;IACH;EACJ,CAf2B,EAezB,CAACM,MAAD,CAfyB,CAehB;EAfgB,CAA5B;EAiBA,OAAO,CAACE,UAAD,EAAaD,KAAb,CAAP;AACH,CApBD;;AAqBA,eAAeT,aAAf"},"metadata":{},"sourceType":"module"}