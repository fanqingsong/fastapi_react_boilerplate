{"ast":null,"code":"import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.deleteMany() method, the result\n * of the call (the list of deleted record ids), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteMany, { loading: false, loaded: false }]\n * - start:   [deleteMany, { loading: true, loaded: false }]\n * - success: [deleteMany, { data: [data from response], loading: false, loaded: true }]\n * - error:   [deleteMany, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param ids The resource identifiers, e.g. [123, 456]\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [deleteMany, { data, error, loading, loaded }].\n *\n * The deleteMany() function can be called in 3 different ways:\n *  - with the same parameters as the useDeleteMany() hook: deleteMany(resource, ids, options)\n *  - with the same syntax as useMutation: deleteMany({ resource, payload: { ids } }, options)\n *  - with no parameter (if they were already passed to useDeleteMany()): deleteMany()\n *\n * @example // set params when calling the deleteMany callback\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { loading, error }] = useDeleteMany();\n *     const handleClick = () => {\n *         deleteMany('posts', selectedIds)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteMany}>Delete selected posts</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { loading, error }] = useDeleteMany('posts', selectedIds);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteMany}>Delete selected posts</button>;\n * };\n */\n\nvar useDeleteMany = function (resource, ids, options) {\n  var _a = useMutation({\n    type: 'deleteMany',\n    resource: resource,\n    payload: {\n      ids: ids\n    }\n  }, options),\n      mutate = _a[0],\n      state = _a[1];\n\n  var deleteMany = useCallback(function (resource, ids, options) {\n    if (typeof resource === 'string') {\n      var query = {\n        type: 'deleteMany',\n        resource: resource,\n        payload: {\n          ids: ids\n        }\n      };\n      return mutate(query, options);\n    } else {\n      return mutate(resource, ids);\n    }\n  }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return [deleteMany, state];\n};\n\nexport default useDeleteMany;","map":{"version":3,"names":["useCallback","useMutation","useDeleteMany","resource","ids","options","_a","type","payload","mutate","state","deleteMany","query"],"sources":["/app/node_modules/ra-core/esm/dataProvider/useDeleteMany.js"],"sourcesContent":["import { useCallback } from 'react';\nimport useMutation from './useMutation';\n/**\n * Get a callback to call the dataProvider.deleteMany() method, the result\n * of the call (the list of deleted record ids), and the loading state.\n *\n * The return value updates according to the request state:\n *\n * - initial: [deleteMany, { loading: false, loaded: false }]\n * - start:   [deleteMany, { loading: true, loaded: false }]\n * - success: [deleteMany, { data: [data from response], loading: false, loaded: true }]\n * - error:   [deleteMany, { error: [error from response], loading: false, loaded: false }]\n *\n * @param resource The resource name, e.g. 'posts'\n * @param ids The resource identifiers, e.g. [123, 456]\n * @param options Options object to pass to the dataProvider. May include side effects to be executed upon success or failure, e.g. { onSuccess: { refresh: true } }\n *\n * @returns The current request state. Destructure as [deleteMany, { data, error, loading, loaded }].\n *\n * The deleteMany() function can be called in 3 different ways:\n *  - with the same parameters as the useDeleteMany() hook: deleteMany(resource, ids, options)\n *  - with the same syntax as useMutation: deleteMany({ resource, payload: { ids } }, options)\n *  - with no parameter (if they were already passed to useDeleteMany()): deleteMany()\n *\n * @example // set params when calling the deleteMany callback\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { loading, error }] = useDeleteMany();\n *     const handleClick = () => {\n *         deleteMany('posts', selectedIds)\n *     }\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteMany}>Delete selected posts</button>;\n * };\n *\n * @example // set params when calling the hook\n *\n * import { useDeleteMany } from 'react-admin';\n *\n * const BulkDeletePostsButton = ({ selectedIds }) => {\n *     const [deleteMany, { loading, error }] = useDeleteMany('posts', selectedIds);\n *     if (error) { return <p>ERROR</p>; }\n *     return <button disabled={loading} onClick={deleteMany}>Delete selected posts</button>;\n * };\n */\nvar useDeleteMany = function (resource, ids, options) {\n    var _a = useMutation({ type: 'deleteMany', resource: resource, payload: { ids: ids } }, options), mutate = _a[0], state = _a[1];\n    var deleteMany = useCallback(function (resource, ids, options) {\n        if (typeof resource === 'string') {\n            var query = {\n                type: 'deleteMany',\n                resource: resource,\n                payload: {\n                    ids: ids,\n                },\n            };\n            return mutate(query, options);\n        }\n        else {\n            return mutate(resource, ids);\n        }\n    }, [mutate] // eslint-disable-line react-hooks/exhaustive-deps\n    );\n    return [deleteMany, state];\n};\nexport default useDeleteMany;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,OAAzB,EAAkC;EAClD,IAAIC,EAAE,GAAGL,WAAW,CAAC;IAAEM,IAAI,EAAE,YAAR;IAAsBJ,QAAQ,EAAEA,QAAhC;IAA0CK,OAAO,EAAE;MAAEJ,GAAG,EAAEA;IAAP;EAAnD,CAAD,EAAoEC,OAApE,CAApB;EAAA,IAAkGI,MAAM,GAAGH,EAAE,CAAC,CAAD,CAA7G;EAAA,IAAkHI,KAAK,GAAGJ,EAAE,CAAC,CAAD,CAA5H;;EACA,IAAIK,UAAU,GAAGX,WAAW,CAAC,UAAUG,QAAV,EAAoBC,GAApB,EAAyBC,OAAzB,EAAkC;IAC3D,IAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC;MAC9B,IAAIS,KAAK,GAAG;QACRL,IAAI,EAAE,YADE;QAERJ,QAAQ,EAAEA,QAFF;QAGRK,OAAO,EAAE;UACLJ,GAAG,EAAEA;QADA;MAHD,CAAZ;MAOA,OAAOK,MAAM,CAACG,KAAD,EAAQP,OAAR,CAAb;IACH,CATD,MAUK;MACD,OAAOI,MAAM,CAACN,QAAD,EAAWC,GAAX,CAAb;IACH;EACJ,CAd2B,EAczB,CAACK,MAAD,CAdyB,CAchB;EAdgB,CAA5B;EAgBA,OAAO,CAACE,UAAD,EAAaD,KAAb,CAAP;AACH,CAnBD;;AAoBA,eAAeR,aAAf"},"metadata":{},"sourceType":"module"}