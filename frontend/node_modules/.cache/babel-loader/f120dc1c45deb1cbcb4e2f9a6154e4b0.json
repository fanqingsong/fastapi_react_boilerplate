{"ast":null,"code":"//     (c) 2012-2018 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documentation:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n'use strict';\n\nvar forEach = require('array.prototype.foreach');\n\nvar entries = require('object.entries');\n\nvar warning = require('warning');\n\nvar has = require('has');\n\nvar trim = require('string.prototype.trim');\n\nvar warn = function warn(message) {\n  warning(false, message);\n};\n\nvar replace = String.prototype.replace;\nvar split = String.prototype.split; // #### Pluralization methods\n// The string that separates the different phrase possibilities.\n\nvar delimiter = '||||';\n\nvar russianPluralGroups = function (n) {\n  var lastTwo = n % 100;\n  var end = lastTwo % 10;\n\n  if (lastTwo !== 11 && end === 1) {\n    return 0;\n  }\n\n  if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n    return 1;\n  }\n\n  return 2;\n};\n\nvar defaultPluralRules = {\n  // Mapping from pluralization group plural logic.\n  pluralTypes: {\n    arabic: function (n) {\n      // http://www.arabeyes.org/Plural_Forms\n      if (n < 3) {\n        return n;\n      }\n\n      var lastTwo = n % 100;\n      if (lastTwo >= 3 && lastTwo <= 10) return 3;\n      return lastTwo >= 11 ? 4 : 5;\n    },\n    bosnian_serbian: russianPluralGroups,\n    chinese: function () {\n      return 0;\n    },\n    croatian: russianPluralGroups,\n    french: function (n) {\n      return n >= 2 ? 1 : 0;\n    },\n    german: function (n) {\n      return n !== 1 ? 1 : 0;\n    },\n    russian: russianPluralGroups,\n    lithuanian: function (n) {\n      if (n % 10 === 1 && n % 100 !== 11) {\n        return 0;\n      }\n\n      return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;\n    },\n    czech: function (n) {\n      if (n === 1) {\n        return 0;\n      }\n\n      return n >= 2 && n <= 4 ? 1 : 2;\n    },\n    polish: function (n) {\n      if (n === 1) {\n        return 0;\n      }\n\n      var end = n % 10;\n      return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n    },\n    icelandic: function (n) {\n      return n % 10 !== 1 || n % 100 === 11 ? 1 : 0;\n    },\n    slovenian: function (n) {\n      var lastTwo = n % 100;\n\n      if (lastTwo === 1) {\n        return 0;\n      }\n\n      if (lastTwo === 2) {\n        return 1;\n      }\n\n      if (lastTwo === 3 || lastTwo === 4) {\n        return 2;\n      }\n\n      return 3;\n    }\n  },\n  // Mapping from pluralization group to individual language codes/locales.\n  // Will look up based on exact match, if not found and it's a locale will parse the locale\n  // for language code, and if that does not exist will default to 'en'\n  pluralTypeToLanguages: {\n    arabic: ['ar'],\n    bosnian_serbian: ['bs-Latn-BA', 'bs-Cyrl-BA', 'srl-RS', 'sr-RS'],\n    chinese: ['id', 'id-ID', 'ja', 'ko', 'ko-KR', 'lo', 'ms', 'th', 'th-TH', 'zh'],\n    croatian: ['hr', 'hr-HR'],\n    german: ['fa', 'da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hi-IN', 'hu', 'hu-HU', 'it', 'nl', 'no', 'pt', 'sv', 'tr'],\n    french: ['fr', 'tl', 'pt-br'],\n    russian: ['ru', 'ru-RU'],\n    lithuanian: ['lt'],\n    czech: ['cs', 'cs-CZ', 'sk'],\n    polish: ['pl'],\n    icelandic: ['is'],\n    slovenian: ['sl-SL']\n  }\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  forEach(entries(mapping), function (entry) {\n    var type = entry[0];\n    var langs = entry[1];\n    forEach(langs, function (lang) {\n      ret[lang] = type;\n    });\n  });\n  return ret;\n}\n\nfunction pluralTypeName(pluralRules, locale) {\n  var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);\n  return langToPluralType[locale] || langToPluralType[split.call(locale, /-/, 1)[0]] || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(pluralRules, pluralType, count) {\n  return pluralRules.pluralTypes[pluralType](count);\n}\n\nfunction createMemoizedPluralTypeNameSelector() {\n  var localePluralTypeStorage = {};\n  return function (pluralRules, locale) {\n    var pluralType = localePluralTypeStorage[locale];\n\n    if (pluralType && !pluralRules.pluralTypes[pluralType]) {\n      pluralType = null;\n      localePluralTypeStorage[locale] = pluralType;\n    }\n\n    if (!pluralType) {\n      pluralType = pluralTypeName(pluralRules, locale);\n\n      if (pluralType) {\n        localePluralTypeStorage[locale] = pluralType;\n      }\n    }\n\n    return pluralType;\n  };\n}\n\nfunction escape(token) {\n  return token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction constructTokenRegex(opts) {\n  var prefix = opts && opts.prefix || '%{';\n  var suffix = opts && opts.suffix || '}';\n\n  if (prefix === delimiter || suffix === delimiter) {\n    throw new RangeError('\"' + delimiter + '\" token is reserved for pluralization');\n  }\n\n  return new RegExp(escape(prefix) + '(.*?)' + escape(suffix), 'g');\n}\n\nvar memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();\nvar defaultTokenRegex = /%\\{(.*?)\\}/g; // ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\n\nfunction transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase;\n  var interpolationRegex = tokenRegex || defaultTokenRegex; // allow number as a pluralization shortcut\n\n  var options = typeof substitutions === 'number' ? {\n    smart_count: substitutions\n  } : substitutions; // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n\n  if (options.smart_count != null && phrase) {\n    var pluralRulesOrDefault = pluralRules || defaultPluralRules;\n    var texts = split.call(phrase, delimiter);\n    var bestLocale = locale || 'en';\n    var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);\n    var pluralTypeWithCount = pluralTypeIndex(pluralRulesOrDefault, pluralType, options.smart_count);\n    result = trim(texts[pluralTypeWithCount] || texts[0]);\n  } // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n\n\n  result = replace.call(result, interpolationRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) {\n      return expression;\n    }\n\n    return options[argument];\n  });\n  return result;\n} // ### Polyglot class constructor\n\n\nfunction Polyglot(options) {\n  var opts = options || {};\n  this.phrases = {};\n  this.extend(opts.phrases || {});\n  this.currentLocale = opts.locale || 'en';\n  var allowMissing = opts.allowMissing ? transformPhrase : null;\n  this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n  this.warn = opts.warn || warn;\n  this.tokenRegex = constructTokenRegex(opts.interpolation);\n  this.pluralRules = opts.pluralRules || defaultPluralRules;\n} // ### polyglot.locale([locale])\n//\n// Get or set locale. Internally, Polyglot only uses locale for pluralization.\n\n\nPolyglot.prototype.locale = function (newLocale) {\n  if (newLocale) this.currentLocale = newLocale;\n  return this.currentLocale;\n}; // ### polyglot.extend(phrases)\n//\n// Use `extend` to tell Polyglot how to translate a given key.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The key can be any string.  Feel free to call `extend` multiple times;\n// it will override any phrases with the same key, but leave existing phrases\n// untouched.\n//\n// It is also possible to pass nested phrase objects, which get flattened\n// into an object with the nested keys concatenated using dot notation.\n//\n//     polyglot.extend({\n//       \"nav\": {\n//         \"hello\": \"Hello\",\n//         \"hello_name\": \"Hello, %{name}\",\n//         \"sidebar\": {\n//           \"welcome\": \"Welcome\"\n//         }\n//       }\n//     });\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}',\n//     //   'nav.sidebar.welcome': 'Welcome'\n//     // }\n//\n// `extend` accepts an optional second argument, `prefix`, which can be used\n// to prefix every key in the phrases object with some string, using dot\n// notation.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     }, \"nav\");\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}'\n//     // }\n//\n// This feature is used internally to support nested phrase objects.\n\n\nPolyglot.prototype.extend = function (morePhrases, prefix) {\n  forEach(entries(morePhrases || {}), function (entry) {\n    var key = entry[0];\n    var phrase = entry[1];\n    var prefixedKey = prefix ? prefix + '.' + key : key;\n\n    if (typeof phrase === 'object') {\n      this.extend(phrase, prefixedKey);\n    } else {\n      this.phrases[prefixedKey] = phrase;\n    }\n  }, this);\n}; // ### polyglot.unset(phrases)\n// Use `unset` to selectively remove keys from a polyglot instance.\n//\n//     polyglot.unset(\"some_key\");\n//     polyglot.unset({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The unset method can take either a string (for the key), or an object hash with\n// the keys that you would like to unset.\n\n\nPolyglot.prototype.unset = function (morePhrases, prefix) {\n  if (typeof morePhrases === 'string') {\n    delete this.phrases[morePhrases];\n  } else {\n    forEach(entries(morePhrases || {}), function (entry) {\n      var key = entry[0];\n      var phrase = entry[1];\n      var prefixedKey = prefix ? prefix + '.' + key : key;\n\n      if (typeof phrase === 'object') {\n        this.unset(phrase, prefixedKey);\n      } else {\n        delete this.phrases[prefixedKey];\n      }\n    }, this);\n  }\n}; // ### polyglot.clear()\n//\n// Clears all phrases. Useful for special cases, such as freeing\n// up memory if you have lots of phrases but no longer need to\n// perform any translation. Also used internally by `replace`.\n\n\nPolyglot.prototype.clear = function () {\n  this.phrases = {};\n}; // ### polyglot.replace(phrases)\n//\n// Completely replace the existing phrases with a new set of phrases.\n// Normally, just use `extend` to add more phrases, but under certain\n// circumstances, you may want to make sure no old phrases are lying around.\n\n\nPolyglot.prototype.replace = function (newPhrases) {\n  this.clear();\n  this.extend(newPhrases);\n}; // ### polyglot.t(key, options)\n//\n// The most-used method. Provide a key, and `t` will return the\n// phrase.\n//\n//     polyglot.t(\"hello\");\n//     => \"Hello\"\n//\n// The phrase value is provided first by a call to `polyglot.extend()` or\n// `polyglot.replace()`.\n//\n// Pass in an object as the second argument to perform interpolation.\n//\n//     polyglot.t(\"hello_name\", {name: \"Spike\"});\n//     => \"Hello, Spike\"\n//\n// If you like, you can provide a default value in case the phrase is missing.\n// Use the special option key \"_\" to specify a default.\n//\n//     polyglot.t(\"i_like_to_write_in_language\", {\n//       _: \"I like to write in %{language}.\",\n//       language: \"JavaScript\"\n//     });\n//     => \"I like to write in JavaScript.\"\n//\n\n\nPolyglot.prototype.t = function (key, options) {\n  var phrase, result;\n  var opts = options == null ? {} : options;\n\n  if (typeof this.phrases[key] === 'string') {\n    phrase = this.phrases[key];\n  } else if (typeof opts._ === 'string') {\n    phrase = opts._;\n  } else if (this.onMissingKey) {\n    var onMissingKey = this.onMissingKey;\n    result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n  } else {\n    this.warn('Missing translation for key: \"' + key + '\"');\n    result = key;\n  }\n\n  if (typeof phrase === 'string') {\n    result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n  }\n\n  return result;\n}; // ### polyglot.has(key)\n//\n// Check if polyglot has a translation for given key\n\n\nPolyglot.prototype.has = function (key) {\n  return has(this.phrases, key);\n}; // export transformPhrase\n\n\nPolyglot.transformPhrase = function transform(phrase, substitutions, locale) {\n  return transformPhrase(phrase, substitutions, locale);\n};\n\nmodule.exports = Polyglot;","map":{"version":3,"names":["forEach","require","entries","warning","has","trim","warn","message","replace","String","prototype","split","delimiter","russianPluralGroups","n","lastTwo","end","defaultPluralRules","pluralTypes","arabic","bosnian_serbian","chinese","croatian","french","german","russian","lithuanian","czech","polish","icelandic","slovenian","pluralTypeToLanguages","langToTypeMap","mapping","ret","entry","type","langs","lang","pluralTypeName","pluralRules","locale","langToPluralType","call","en","pluralTypeIndex","pluralType","count","createMemoizedPluralTypeNameSelector","localePluralTypeStorage","escape","token","constructTokenRegex","opts","prefix","suffix","RangeError","RegExp","memoizedPluralTypeName","defaultTokenRegex","transformPhrase","phrase","substitutions","tokenRegex","TypeError","result","interpolationRegex","options","smart_count","pluralRulesOrDefault","texts","bestLocale","pluralTypeWithCount","expression","argument","Polyglot","phrases","extend","currentLocale","allowMissing","onMissingKey","interpolation","newLocale","morePhrases","key","prefixedKey","unset","clear","newPhrases","t","_","transform","module","exports"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/node-polyglot/index.js"],"sourcesContent":["//     (c) 2012-2018 Airbnb, Inc.\n//\n//     polyglot.js may be freely distributed under the terms of the BSD\n//     license. For all licensing information, details, and documentation:\n//     http://airbnb.github.com/polyglot.js\n//\n//\n// Polyglot.js is an I18n helper library written in JavaScript, made to\n// work both in the browser and in Node. It provides a simple solution for\n// interpolation and pluralization, based off of Airbnb's\n// experience adding I18n functionality to its Backbone.js and Node apps.\n//\n// Polylglot is agnostic to your translation backend. It doesn't perform any\n// translation; it simply gives you a way to manage translated phrases from\n// your client- or server-side JavaScript application.\n//\n\n'use strict';\n\nvar forEach = require('array.prototype.foreach');\nvar entries = require('object.entries');\nvar warning = require('warning');\nvar has = require('has');\nvar trim = require('string.prototype.trim');\n\nvar warn = function warn(message) {\n  warning(false, message);\n};\n\nvar replace = String.prototype.replace;\nvar split = String.prototype.split;\n\n// #### Pluralization methods\n// The string that separates the different phrase possibilities.\nvar delimiter = '||||';\n\nvar russianPluralGroups = function (n) {\n  var lastTwo = n % 100;\n  var end = lastTwo % 10;\n  if (lastTwo !== 11 && end === 1) {\n    return 0;\n  }\n  if (2 <= end && end <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n    return 1;\n  }\n  return 2;\n};\n\nvar defaultPluralRules = {\n  // Mapping from pluralization group plural logic.\n  pluralTypes: {\n    arabic: function (n) {\n      // http://www.arabeyes.org/Plural_Forms\n      if (n < 3) { return n; }\n      var lastTwo = n % 100;\n      if (lastTwo >= 3 && lastTwo <= 10) return 3;\n      return lastTwo >= 11 ? 4 : 5;\n    },\n    bosnian_serbian: russianPluralGroups,\n    chinese: function () { return 0; },\n    croatian: russianPluralGroups,\n    french: function (n) { return n >= 2 ? 1 : 0; },\n    german: function (n) { return n !== 1 ? 1 : 0; },\n    russian: russianPluralGroups,\n    lithuanian: function (n) {\n      if (n % 10 === 1 && n % 100 !== 11) { return 0; }\n      return n % 10 >= 2 && n % 10 <= 9 && (n % 100 < 11 || n % 100 > 19) ? 1 : 2;\n    },\n    czech: function (n) {\n      if (n === 1) { return 0; }\n      return (n >= 2 && n <= 4) ? 1 : 2;\n    },\n    polish: function (n) {\n      if (n === 1) { return 0; }\n      var end = n % 10;\n      return 2 <= end && end <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;\n    },\n    icelandic: function (n) { return (n % 10 !== 1 || n % 100 === 11) ? 1 : 0; },\n    slovenian: function (n) {\n      var lastTwo = n % 100;\n      if (lastTwo === 1) {\n        return 0;\n      }\n      if (lastTwo === 2) {\n        return 1;\n      }\n      if (lastTwo === 3 || lastTwo === 4) {\n        return 2;\n      }\n      return 3;\n    }\n  },\n\n  // Mapping from pluralization group to individual language codes/locales.\n  // Will look up based on exact match, if not found and it's a locale will parse the locale\n  // for language code, and if that does not exist will default to 'en'\n  pluralTypeToLanguages: {\n    arabic: ['ar'],\n    bosnian_serbian: ['bs-Latn-BA', 'bs-Cyrl-BA', 'srl-RS', 'sr-RS'],\n    chinese: ['id', 'id-ID', 'ja', 'ko', 'ko-KR', 'lo', 'ms', 'th', 'th-TH', 'zh'],\n    croatian: ['hr', 'hr-HR'],\n    german: ['fa', 'da', 'de', 'en', 'es', 'fi', 'el', 'he', 'hi-IN', 'hu', 'hu-HU', 'it', 'nl', 'no', 'pt', 'sv', 'tr'],\n    french: ['fr', 'tl', 'pt-br'],\n    russian: ['ru', 'ru-RU'],\n    lithuanian: ['lt'],\n    czech: ['cs', 'cs-CZ', 'sk'],\n    polish: ['pl'],\n    icelandic: ['is'],\n    slovenian: ['sl-SL']\n  }\n};\n\nfunction langToTypeMap(mapping) {\n  var ret = {};\n  forEach(entries(mapping), function (entry) {\n    var type = entry[0];\n    var langs = entry[1];\n    forEach(langs, function (lang) {\n      ret[lang] = type;\n    });\n  });\n  return ret;\n}\n\nfunction pluralTypeName(pluralRules, locale) {\n  var langToPluralType = langToTypeMap(pluralRules.pluralTypeToLanguages);\n  return langToPluralType[locale]\n    || langToPluralType[split.call(locale, /-/, 1)[0]]\n    || langToPluralType.en;\n}\n\nfunction pluralTypeIndex(pluralRules, pluralType, count) {\n  return pluralRules.pluralTypes[pluralType](count);\n}\n\nfunction createMemoizedPluralTypeNameSelector() {\n  var localePluralTypeStorage = {};\n\n  return function (pluralRules, locale) {\n    var pluralType = localePluralTypeStorage[locale];\n\n    if (pluralType && !pluralRules.pluralTypes[pluralType]) {\n      pluralType = null;\n      localePluralTypeStorage[locale] = pluralType;\n    }\n\n    if (!pluralType) {\n      pluralType = pluralTypeName(pluralRules, locale);\n\n      if (pluralType) {\n        localePluralTypeStorage[locale] = pluralType;\n      }\n    }\n\n    return pluralType;\n  };\n}\n\nfunction escape(token) {\n  return token.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction constructTokenRegex(opts) {\n  var prefix = (opts && opts.prefix) || '%{';\n  var suffix = (opts && opts.suffix) || '}';\n\n  if (prefix === delimiter || suffix === delimiter) {\n    throw new RangeError('\"' + delimiter + '\" token is reserved for pluralization');\n  }\n\n  return new RegExp(escape(prefix) + '(.*?)' + escape(suffix), 'g');\n}\n\nvar memoizedPluralTypeName = createMemoizedPluralTypeNameSelector();\n\nvar defaultTokenRegex = /%\\{(.*?)\\}/g;\n\n// ### transformPhrase(phrase, substitutions, locale)\n//\n// Takes a phrase string and transforms it by choosing the correct\n// plural form and interpolating it.\n//\n//     transformPhrase('Hello, %{name}!', {name: 'Spike'});\n//     // \"Hello, Spike!\"\n//\n// The correct plural form is selected if substitutions.smart_count\n// is set. You can pass in a number instead of an Object as `substitutions`\n// as a shortcut for `smart_count`.\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 1}, 'en');\n//     // \"1 new message\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', {smart_count: 2}, 'en');\n//     // \"2 new messages\"\n//\n//     transformPhrase('%{smart_count} new messages |||| 1 new message', 5, 'en');\n//     // \"5 new messages\"\n//\n// You should pass in a third argument, the locale, to specify the correct plural type.\n// It defaults to `'en'` with 2 plural forms.\nfunction transformPhrase(phrase, substitutions, locale, tokenRegex, pluralRules) {\n  if (typeof phrase !== 'string') {\n    throw new TypeError('Polyglot.transformPhrase expects argument #1 to be string');\n  }\n\n  if (substitutions == null) {\n    return phrase;\n  }\n\n  var result = phrase;\n  var interpolationRegex = tokenRegex || defaultTokenRegex;\n\n  // allow number as a pluralization shortcut\n  var options = typeof substitutions === 'number' ? { smart_count: substitutions } : substitutions;\n\n  // Select plural form: based on a phrase text that contains `n`\n  // plural forms separated by `delimiter`, a `locale`, and a `substitutions.smart_count`,\n  // choose the correct plural form. This is only done if `count` is set.\n  if (options.smart_count != null && phrase) {\n    var pluralRulesOrDefault = pluralRules || defaultPluralRules;\n    var texts = split.call(phrase, delimiter);\n    var bestLocale = locale || 'en';\n    var pluralType = memoizedPluralTypeName(pluralRulesOrDefault, bestLocale);\n    var pluralTypeWithCount = pluralTypeIndex(\n      pluralRulesOrDefault,\n      pluralType,\n      options.smart_count\n    );\n\n    result = trim(texts[pluralTypeWithCount] || texts[0]);\n  }\n\n  // Interpolate: Creates a `RegExp` object for each interpolation placeholder.\n  result = replace.call(result, interpolationRegex, function (expression, argument) {\n    if (!has(options, argument) || options[argument] == null) { return expression; }\n    return options[argument];\n  });\n\n  return result;\n}\n\n// ### Polyglot class constructor\nfunction Polyglot(options) {\n  var opts = options || {};\n  this.phrases = {};\n  this.extend(opts.phrases || {});\n  this.currentLocale = opts.locale || 'en';\n  var allowMissing = opts.allowMissing ? transformPhrase : null;\n  this.onMissingKey = typeof opts.onMissingKey === 'function' ? opts.onMissingKey : allowMissing;\n  this.warn = opts.warn || warn;\n  this.tokenRegex = constructTokenRegex(opts.interpolation);\n  this.pluralRules = opts.pluralRules || defaultPluralRules;\n}\n\n// ### polyglot.locale([locale])\n//\n// Get or set locale. Internally, Polyglot only uses locale for pluralization.\nPolyglot.prototype.locale = function (newLocale) {\n  if (newLocale) this.currentLocale = newLocale;\n  return this.currentLocale;\n};\n\n// ### polyglot.extend(phrases)\n//\n// Use `extend` to tell Polyglot how to translate a given key.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The key can be any string.  Feel free to call `extend` multiple times;\n// it will override any phrases with the same key, but leave existing phrases\n// untouched.\n//\n// It is also possible to pass nested phrase objects, which get flattened\n// into an object with the nested keys concatenated using dot notation.\n//\n//     polyglot.extend({\n//       \"nav\": {\n//         \"hello\": \"Hello\",\n//         \"hello_name\": \"Hello, %{name}\",\n//         \"sidebar\": {\n//           \"welcome\": \"Welcome\"\n//         }\n//       }\n//     });\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}',\n//     //   'nav.sidebar.welcome': 'Welcome'\n//     // }\n//\n// `extend` accepts an optional second argument, `prefix`, which can be used\n// to prefix every key in the phrases object with some string, using dot\n// notation.\n//\n//     polyglot.extend({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     }, \"nav\");\n//\n//     console.log(polyglot.phrases);\n//     // {\n//     //   'nav.hello': 'Hello',\n//     //   'nav.hello_name': 'Hello, %{name}'\n//     // }\n//\n// This feature is used internally to support nested phrase objects.\nPolyglot.prototype.extend = function (morePhrases, prefix) {\n  forEach(entries(morePhrases || {}), function (entry) {\n    var key = entry[0];\n    var phrase = entry[1];\n    var prefixedKey = prefix ? prefix + '.' + key : key;\n    if (typeof phrase === 'object') {\n      this.extend(phrase, prefixedKey);\n    } else {\n      this.phrases[prefixedKey] = phrase;\n    }\n  }, this);\n};\n\n// ### polyglot.unset(phrases)\n// Use `unset` to selectively remove keys from a polyglot instance.\n//\n//     polyglot.unset(\"some_key\");\n//     polyglot.unset({\n//       \"hello\": \"Hello\",\n//       \"hello_name\": \"Hello, %{name}\"\n//     });\n//\n// The unset method can take either a string (for the key), or an object hash with\n// the keys that you would like to unset.\nPolyglot.prototype.unset = function (morePhrases, prefix) {\n  if (typeof morePhrases === 'string') {\n    delete this.phrases[morePhrases];\n  } else {\n    forEach(entries(morePhrases || {}), function (entry) {\n      var key = entry[0];\n      var phrase = entry[1];\n      var prefixedKey = prefix ? prefix + '.' + key : key;\n      if (typeof phrase === 'object') {\n        this.unset(phrase, prefixedKey);\n      } else {\n        delete this.phrases[prefixedKey];\n      }\n    }, this);\n  }\n};\n\n// ### polyglot.clear()\n//\n// Clears all phrases. Useful for special cases, such as freeing\n// up memory if you have lots of phrases but no longer need to\n// perform any translation. Also used internally by `replace`.\nPolyglot.prototype.clear = function () {\n  this.phrases = {};\n};\n\n// ### polyglot.replace(phrases)\n//\n// Completely replace the existing phrases with a new set of phrases.\n// Normally, just use `extend` to add more phrases, but under certain\n// circumstances, you may want to make sure no old phrases are lying around.\nPolyglot.prototype.replace = function (newPhrases) {\n  this.clear();\n  this.extend(newPhrases);\n};\n\n// ### polyglot.t(key, options)\n//\n// The most-used method. Provide a key, and `t` will return the\n// phrase.\n//\n//     polyglot.t(\"hello\");\n//     => \"Hello\"\n//\n// The phrase value is provided first by a call to `polyglot.extend()` or\n// `polyglot.replace()`.\n//\n// Pass in an object as the second argument to perform interpolation.\n//\n//     polyglot.t(\"hello_name\", {name: \"Spike\"});\n//     => \"Hello, Spike\"\n//\n// If you like, you can provide a default value in case the phrase is missing.\n// Use the special option key \"_\" to specify a default.\n//\n//     polyglot.t(\"i_like_to_write_in_language\", {\n//       _: \"I like to write in %{language}.\",\n//       language: \"JavaScript\"\n//     });\n//     => \"I like to write in JavaScript.\"\n//\nPolyglot.prototype.t = function (key, options) {\n  var phrase, result;\n  var opts = options == null ? {} : options;\n  if (typeof this.phrases[key] === 'string') {\n    phrase = this.phrases[key];\n  } else if (typeof opts._ === 'string') {\n    phrase = opts._;\n  } else if (this.onMissingKey) {\n    var onMissingKey = this.onMissingKey;\n    result = onMissingKey(key, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n  } else {\n    this.warn('Missing translation for key: \"' + key + '\"');\n    result = key;\n  }\n  if (typeof phrase === 'string') {\n    result = transformPhrase(phrase, opts, this.currentLocale, this.tokenRegex, this.pluralRules);\n  }\n  return result;\n};\n\n// ### polyglot.has(key)\n//\n// Check if polyglot has a translation for given key\nPolyglot.prototype.has = function (key) {\n  return has(this.phrases, key);\n};\n\n// export transformPhrase\nPolyglot.transformPhrase = function transform(phrase, substitutions, locale) {\n  return transformPhrase(phrase, substitutions, locale);\n};\n\nmodule.exports = Polyglot;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}