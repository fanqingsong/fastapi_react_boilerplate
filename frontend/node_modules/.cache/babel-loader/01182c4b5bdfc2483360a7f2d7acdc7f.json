{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect, useState, memo } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n  data: {},\n  ids: []\n};\n\nvar getDataAndIds = function (record, source, fieldKey) {\n  var list = get(record, source);\n\n  if (!list) {\n    return initialState;\n  }\n\n  return fieldKey ? {\n    data: list.reduce(function (prev, item) {\n      prev[item[fieldKey]] = item;\n      return prev;\n    }, {}),\n    ids: list.map(function (item) {\n      return item[fieldKey];\n    })\n  } : {\n    data: list.reduce(function (prev, item) {\n      prev[JSON.stringify(item)] = item;\n      return prev;\n    }, {}),\n    ids: list.map(JSON.stringify)\n  };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n *     TagsField.defaultProps = { addLabel: true };\n */\n\n\nexport var ArrayField = memo(function (props) {\n  var addLabel = props.addLabel,\n      basePath = props.basePath,\n      children = props.children,\n      _record = props.record,\n      resource = props.resource,\n      sortable = props.sortable,\n      source = props.source,\n      fieldKey = props.fieldKey,\n      rest = __rest(props, [\"addLabel\", \"basePath\", \"children\", \"record\", \"resource\", \"sortable\", \"source\", \"fieldKey\"]);\n\n  var record = useRecordContext(props);\n\n  var _a = useState(initialState.ids),\n      ids = _a[0],\n      setIds = _a[1];\n\n  var _b = useState(initialState.data),\n      data = _b[0],\n      setData = _b[1];\n\n  useEffect(function () {\n    var _a = getDataAndIds(record, source, fieldKey),\n        ids = _a.ids,\n        data = _a.data;\n\n    setIds(ids);\n    setData(data);\n  }, [record, source, fieldKey]);\n  return React.createElement(ListContextProvider, {\n    value: {\n      ids: ids,\n      data: data,\n      loading: false,\n      basePath: basePath,\n      selectedIds: [],\n      currentSort: {\n        field: null,\n        order: null\n      },\n      displayedFilters: null,\n      filterValues: null,\n      hasCreate: null,\n      hideFilter: null,\n      loaded: true,\n      onSelect: null,\n      onToggleItem: null,\n      onUnselectItems: null,\n      page: null,\n      perPage: null,\n      resource: resource,\n      setFilters: null,\n      setPage: null,\n      setPerPage: null,\n      setSort: null,\n      showFilter: null,\n      total: ids.length\n    }\n  }, cloneElement(Children.only(children), __assign({\n    ids: ids,\n    data: data,\n    loading: false,\n    basePath: basePath,\n    currentSort: {\n      field: null,\n      order: null\n    },\n    resource: resource\n  }, rest)));\n});\nArrayField.defaultProps = {\n  addLabel: true\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), {\n  fieldKey: PropTypes.string\n});\nArrayField.displayName = 'ArrayField';\nexport default ArrayField;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","cloneElement","Children","useEffect","useState","memo","get","ListContextProvider","useRecordContext","fieldPropTypes","PropTypes","initialState","data","ids","getDataAndIds","record","source","fieldKey","list","reduce","prev","item","map","JSON","stringify","ArrayField","props","addLabel","basePath","children","_record","resource","sortable","rest","_a","setIds","_b","setData","createElement","value","loading","selectedIds","currentSort","field","order","displayedFilters","filterValues","hasCreate","hideFilter","loaded","onSelect","onToggleItem","onUnselectItems","page","perPage","setFilters","setPage","setPerPage","setSort","showFilter","total","only","defaultProps","propTypes","string","displayName"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-ui-materialui/esm/field/ArrayField.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { cloneElement, Children, useEffect, useState, memo, } from 'react';\nimport get from 'lodash/get';\nimport { ListContextProvider, useRecordContext } from 'ra-core';\nimport { fieldPropTypes } from './types';\nimport PropTypes from 'prop-types';\nvar initialState = {\n    data: {},\n    ids: [],\n};\nvar getDataAndIds = function (record, source, fieldKey) {\n    var list = get(record, source);\n    if (!list) {\n        return initialState;\n    }\n    return fieldKey\n        ? {\n            data: list.reduce(function (prev, item) {\n                prev[item[fieldKey]] = item;\n                return prev;\n            }, {}),\n            ids: list.map(function (item) { return item[fieldKey]; }),\n        }\n        : {\n            data: list.reduce(function (prev, item) {\n                prev[JSON.stringify(item)] = item;\n                return prev;\n            }, {}),\n            ids: list.map(JSON.stringify),\n        };\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If the array value contains a lot of items, you may experience slowdowns in the UI.\n * In such cases, set the `fieldKey` prop to use one field as key, and reduce CPU and memory usage:\n *\n * @example\n *     <ArrayField source=\"backlinks\" fieldKey=\"uuid\">\n *         ...\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     );\n *     TagsField.defaultProps = { addLabel: true };\n */\nexport var ArrayField = memo(function (props) {\n    var addLabel = props.addLabel, basePath = props.basePath, children = props.children, _record = props.record, resource = props.resource, sortable = props.sortable, source = props.source, fieldKey = props.fieldKey, rest = __rest(props, [\"addLabel\", \"basePath\", \"children\", \"record\", \"resource\", \"sortable\", \"source\", \"fieldKey\"]);\n    var record = useRecordContext(props);\n    var _a = useState(initialState.ids), ids = _a[0], setIds = _a[1];\n    var _b = useState(initialState.data), data = _b[0], setData = _b[1];\n    useEffect(function () {\n        var _a = getDataAndIds(record, source, fieldKey), ids = _a.ids, data = _a.data;\n        setIds(ids);\n        setData(data);\n    }, [record, source, fieldKey]);\n    return (React.createElement(ListContextProvider, { value: {\n            ids: ids,\n            data: data,\n            loading: false,\n            basePath: basePath,\n            selectedIds: [],\n            currentSort: { field: null, order: null },\n            displayedFilters: null,\n            filterValues: null,\n            hasCreate: null,\n            hideFilter: null,\n            loaded: true,\n            onSelect: null,\n            onToggleItem: null,\n            onUnselectItems: null,\n            page: null,\n            perPage: null,\n            resource: resource,\n            setFilters: null,\n            setPage: null,\n            setPerPage: null,\n            setSort: null,\n            showFilter: null,\n            total: ids.length,\n        } }, cloneElement(Children.only(children), __assign({ ids: ids, data: data, loading: false, basePath: basePath, currentSort: { field: null, order: null }, resource: resource }, rest))));\n});\nArrayField.defaultProps = {\n    addLabel: true,\n};\nArrayField.propTypes = __assign(__assign({}, fieldPropTypes), { fieldKey: PropTypes.string });\nArrayField.displayName = 'ArrayField';\nexport default ArrayField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}