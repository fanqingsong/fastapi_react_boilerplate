{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - bulkActionButtons\n * - component\n * - empty\n * - exporter\n * - filter (the permanent filter to apply to the query)\n * - filterDefaultValues (the default values for `alwaysOn` filters)\n * - filters (a list of inputs used to display the filter button/form combo)\n * - pagination\n * - perPage\n * - sort\n * - title\n * - syncWithLocation\n *\n * @example\n *\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\n\nvar List = function (props) {\n  useCheckMinimumRequiredProps('List', ['children'], props);\n  var controllerProps = useListController(props);\n  return React.createElement(ListContextProvider, {\n    value: controllerProps\n  }, React.createElement(ListView, __assign({}, props, controllerProps)));\n};\n\nList.propTypes = {\n  // the props you can change\n  // @ts-ignore-line\n  actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  aside: PropTypes.element,\n  // @ts-ignore-line\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),\n  // @ts-ignore-line\n  pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  perPage: PropTypes.number.isRequired,\n  //@ts-ignore-line\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  title: TitlePropType,\n  // the props managed by react-admin\n  authProvider: PropTypes.func,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  location: PropTypes.any,\n  match: PropTypes.any,\n  path: PropTypes.string,\n  resource: PropTypes.string,\n  syncWithLocation: PropTypes.bool\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10\n};\nexport default List;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","PropTypes","useCheckMinimumRequiredProps","useListController","ListContextProvider","TitlePropType","ListView","List","props","controllerProps","createElement","value","propTypes","actions","oneOfType","bool","element","aside","bulkActionButtons","children","classes","object","className","string","filter","filterDefaultValues","filters","arrayOf","pagination","perPage","number","isRequired","sort","shape","field","order","title","authProvider","func","hasCreate","hasEdit","hasList","hasShow","location","any","match","path","resource","syncWithLocation","defaultProps"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-ui-materialui/esm/list/List.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCheckMinimumRequiredProps, useListController, ListContextProvider, } from 'ra-core';\nimport { TitlePropType } from '../layout/Title';\nimport ListView from './ListView';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * The <List> component accepts the following props:\n *\n * - actions\n * - aside\n * - bulkActionButtons\n * - component\n * - empty\n * - exporter\n * - filter (the permanent filter to apply to the query)\n * - filterDefaultValues (the default values for `alwaysOn` filters)\n * - filters (a list of inputs used to display the filter button/form combo)\n * - pagination\n * - perPage\n * - sort\n * - title\n * - syncWithLocation\n *\n * @example\n *\n * const postFilters = [\n *     <TextInput label=\"Search\" source=\"q\" alwaysOn />,\n *     <TextInput label=\"Title\" source=\"title\" />\n * ];\n * export const PostList = (props) => (\n *     <List {...props}\n *         title=\"List of posts\"\n *         sort={{ field: 'published_at' }}\n *         filter={{ is_published: true }}\n *         filters={postFilters}\n *     >\n *         <Datagrid>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n */\nvar List = function (props) {\n    useCheckMinimumRequiredProps('List', ['children'], props);\n    var controllerProps = useListController(props);\n    return (React.createElement(ListContextProvider, { value: controllerProps },\n        React.createElement(ListView, __assign({}, props, controllerProps))));\n};\nList.propTypes = {\n    // the props you can change\n    // @ts-ignore-line\n    actions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n    aside: PropTypes.element,\n    // @ts-ignore-line\n    bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    children: PropTypes.element,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    filterDefaultValues: PropTypes.object,\n    filters: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]),\n    // @ts-ignore-line\n    pagination: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n    perPage: PropTypes.number.isRequired,\n    //@ts-ignore-line\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    title: TitlePropType,\n    // the props managed by react-admin\n    authProvider: PropTypes.func,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasList: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    location: PropTypes.any,\n    match: PropTypes.any,\n    path: PropTypes.string,\n    resource: PropTypes.string,\n    syncWithLocation: PropTypes.bool,\n};\nList.defaultProps = {\n    filter: {},\n    perPage: 10,\n};\nexport default List;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}