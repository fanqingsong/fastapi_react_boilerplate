{"ast":null,"code":"import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail } from './assertions';\nexport var InferenceTypes = ['array', 'boolean', 'date', 'email', 'id', 'image', 'number', 'reference', 'referenceChild', 'referenceArray', 'referenceArrayChild', 'richText', 'string', 'url', 'object'];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\n\nexport var inferTypeFromValues = function (name, values) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (name === 'id') {\n    return {\n      type: 'id',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === '_id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 2) === 'Id') {\n    return {\n      type: 'reference',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 2))\n      },\n      children: {\n        type: 'referenceChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 4) === '_ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 4))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (name.substr(name.length - 3) === 'Ids') {\n    return {\n      type: 'referenceArray',\n      props: {\n        source: name,\n        reference: inflection.pluralize(name.substr(0, name.length - 3))\n      },\n      children: {\n        type: 'referenceArrayChild'\n      }\n    };\n  }\n\n  if (values.length === 0) {\n    if (name === 'email') {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url') {\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    } // FIXME introspect further using name\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreArray(values)) {\n    if (isObject(values[0][0])) {\n      var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) {\n        return acc.concat(vals);\n      }, [])); // FIXME bad visual representation\n\n      return {\n        type: 'array',\n        props: {\n          source: name\n        },\n        children: Object.keys(leafValues_1).map(function (leafName) {\n          return inferTypeFromValues(leafName, leafValues_1[leafName]);\n        })\n      };\n    } // FIXME introspect further\n\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreBoolean(values)) {\n    return {\n      type: 'boolean',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreDate(values)) {\n    return {\n      type: 'date',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreString(values)) {\n    if (name === 'email' || valuesAreEmail(values)) {\n      return {\n        type: 'email',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (name === 'url' || valuesAreUrl(values)) {\n      if (valuesAreImageUrl(values)) {\n        return {\n          type: 'image',\n          props: {\n            source: name\n          }\n        };\n      }\n\n      return {\n        type: 'url',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreDateString(values)) {\n      return {\n        type: 'date',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreHtml(values)) {\n      return {\n        type: 'richText',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n      return {\n        type: 'number',\n        props: {\n          source: name\n        }\n      };\n    }\n\n    return {\n      type: 'string',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n    return {\n      type: 'number',\n      props: {\n        source: name\n      }\n    };\n  }\n\n  if (valuesAreObject(values)) {\n    /// Arbitrarily, choose the first prop of the first object\n    var propName_1 = Object.keys(values[0]).shift();\n    var leafValues = values.map(function (v) {\n      return v[propName_1];\n    });\n    return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n  }\n\n  return {\n    type: 'string',\n    props: {\n      source: name\n    }\n  };\n};","map":{"version":3,"names":["inflection","getValuesFromRecords","isObject","valuesAreArray","valuesAreBoolean","valuesAreDate","valuesAreDateString","valuesAreHtml","valuesAreInteger","valuesAreNumeric","valuesAreObject","valuesAreString","valuesAreUrl","valuesAreImageUrl","valuesAreEmail","InferenceTypes","inferTypeFromValues","name","values","type","props","source","substr","length","reference","pluralize","children","leafValues_1","reduce","acc","vals","concat","Object","keys","map","leafName","propName_1","shift","leafValues","v"],"sources":["/home/lightsong/workspace/freact/frontend/node_modules/ra-core/esm/inference/inferTypeFromValues.js"],"sourcesContent":["import inflection from 'inflection';\nimport getValuesFromRecords from './getValuesFromRecords';\nimport { isObject, valuesAreArray, valuesAreBoolean, valuesAreDate, valuesAreDateString, valuesAreHtml, valuesAreInteger, valuesAreNumeric, valuesAreObject, valuesAreString, valuesAreUrl, valuesAreImageUrl, valuesAreEmail, } from './assertions';\nexport var InferenceTypes = [\n    'array',\n    'boolean',\n    'date',\n    'email',\n    'id',\n    'image',\n    'number',\n    'reference',\n    'referenceChild',\n    'referenceArray',\n    'referenceArrayChild',\n    'richText',\n    'string',\n    'url',\n    'object',\n];\n/**\n * Guesses an element type based on an array of values\n *\n * @example\n *     inferElementFromValues(\n *         'address',\n *         ['2 Baker Street', '1 Downing street'],\n *     );\n *     // { type: 'string', props: { source: 'address' } }\n *\n * @param {string} name Property name, e.g. 'date_of_birth'\n * @param {any[]} values an array of values from which to determine the type, e.g. [12, 34.4, 43]\n */\nexport var inferTypeFromValues = function (name, values) {\n    if (values === void 0) { values = []; }\n    if (name === 'id') {\n        return { type: 'id', props: { source: name } };\n    }\n    if (name.substr(name.length - 3) === '_id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 2) === 'Id') {\n        return {\n            type: 'reference',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 2)),\n            },\n            children: { type: 'referenceChild' },\n        };\n    }\n    if (name.substr(name.length - 4) === '_ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 4)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (name.substr(name.length - 3) === 'Ids') {\n        return {\n            type: 'referenceArray',\n            props: {\n                source: name,\n                reference: inflection.pluralize(name.substr(0, name.length - 3)),\n            },\n            children: { type: 'referenceArrayChild' },\n        };\n    }\n    if (values.length === 0) {\n        if (name === 'email') {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url') {\n            return { type: 'url', props: { source: name } };\n        }\n        // FIXME introspect further using name\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreArray(values)) {\n        if (isObject(values[0][0])) {\n            var leafValues_1 = getValuesFromRecords(values.reduce(function (acc, vals) { return acc.concat(vals); }, []));\n            // FIXME bad visual representation\n            return {\n                type: 'array',\n                props: { source: name },\n                children: Object.keys(leafValues_1).map(function (leafName) {\n                    return inferTypeFromValues(leafName, leafValues_1[leafName]);\n                }),\n            };\n        }\n        // FIXME introspect further\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreBoolean(values)) {\n        return { type: 'boolean', props: { source: name } };\n    }\n    if (valuesAreDate(values)) {\n        return { type: 'date', props: { source: name } };\n    }\n    if (valuesAreString(values)) {\n        if (name === 'email' || valuesAreEmail(values)) {\n            return { type: 'email', props: { source: name } };\n        }\n        if (name === 'url' || valuesAreUrl(values)) {\n            if (valuesAreImageUrl(values)) {\n                return { type: 'image', props: { source: name } };\n            }\n            return { type: 'url', props: { source: name } };\n        }\n        if (valuesAreDateString(values)) {\n            return { type: 'date', props: { source: name } };\n        }\n        if (valuesAreHtml(values)) {\n            return { type: 'richText', props: { source: name } };\n        }\n        if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n            return { type: 'number', props: { source: name } };\n        }\n        return { type: 'string', props: { source: name } };\n    }\n    if (valuesAreInteger(values) || valuesAreNumeric(values)) {\n        return { type: 'number', props: { source: name } };\n    }\n    if (valuesAreObject(values)) {\n        /// Arbitrarily, choose the first prop of the first object\n        var propName_1 = Object.keys(values[0]).shift();\n        var leafValues = values.map(function (v) { return v[propName_1]; });\n        return inferTypeFromValues(name + \".\" + propName_1, leafValues);\n    }\n    return { type: 'string', props: { source: name } };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}