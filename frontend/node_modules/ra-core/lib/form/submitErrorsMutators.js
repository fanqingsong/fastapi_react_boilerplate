"use strict";
/**
 * Fork of the https://github.com/ignatevdev/final-form-submit-errors
 *
 * In react-admin, errors might be objects with `message` and `args` properties which
 * are used for translation.
 * The original final-form-submit-errors mutator was considering those errors as form
 * nested field like `name.message` and `name.args`.
 * This version detects those objects.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObjectEmpty = exports.isValidationError = exports.flatten = exports.clean = exports.resetSubmitErrors = void 0;
function resetSubmitErrors(_a, state, _b) {
    var _c = _a[0], prev = _c.prev, current = _c.current;
    var getIn = _b.getIn, setIn = _b.setIn;
    // Reset the general submit error on any value change
    if (state.formState.submitError) {
        delete state.formState.submitError;
    }
    if (!isObjectEmpty(state.formState.submitErrors)) {
        // Flatten nested errors object for easier comparison
        var flatErrors = flatten(state.formState.submitErrors);
        var changed_1 = [];
        // Iterate over each error
        Object.keys(flatErrors).forEach(function (key) {
            // Compare the value for the error field path
            if (getIn(prev, key) !== getIn(current, key)) {
                changed_1.push(key);
            }
        });
        // Reset the error on value change
        if (changed_1.length) {
            var newErrors_1 = state.formState.submitErrors;
            changed_1.forEach(function (key) {
                newErrors_1 = setIn(newErrors_1, key, null);
            });
            // Clear submit errors from empty objects and arrays
            var cleanErrors = clean(newErrors_1);
            state.formState.submitErrors = cleanErrors;
        }
    }
}
exports.resetSubmitErrors = resetSubmitErrors;
function clean(obj) {
    var newObj = Array.isArray(obj) ? [] : {};
    Object.keys(obj).forEach(function (key) {
        if (obj[key] && typeof obj[key] === 'object') {
            var newVal = clean(obj[key]);
            if (!isObjectEmpty(newVal) && newVal.length !== 0) {
                newObj[key] = newVal;
            }
        }
        else if (obj[key] !== null) {
            newObj[key] = obj[key];
        }
    });
    return newObj;
}
exports.clean = clean;
function flatten(obj) {
    var toReturn = {};
    for (var i in obj) {
        if (!obj.hasOwnProperty(i)) {
            continue;
        }
        if (typeof obj[i] === 'object' &&
            obj[i] !== null &&
            !(0, exports.isValidationError)(obj[i])) {
            var flatObject = flatten(obj[i]);
            for (var x in flatObject) {
                if (!flatObject.hasOwnProperty(x)) {
                    continue;
                }
                // Make a bracket array notation like some[1].array[0]
                var key = (i + "." + x).split('.').reduce(function (str, value) {
                    if (/^\[\d\]/.test(value)) {
                        return "" + str + value;
                    }
                    if (!isNaN(Number(value))) {
                        return str + "[" + value + "]";
                    }
                    if (str) {
                        return str + "." + value;
                    }
                    return value;
                }, '');
                toReturn[key] = flatObject[x];
            }
        }
        else {
            toReturn[i] = obj[i];
        }
    }
    return toReturn;
}
exports.flatten = flatten;
var isValidationError = function (obj) { return obj.message && obj.args; };
exports.isValidationError = isValidationError;
function isObjectEmpty(obj) {
    if (!obj) {
        return true;
    }
    return Object.entries(obj).length === 0 && obj.constructor === Object;
}
exports.isObjectEmpty = isObjectEmpty;
exports.default = {
    resetSubmitErrors: resetSubmitErrors,
};
